import{_ as n,o as s,c as a,e as t}from"./app-C_RrakEG.js";const p={},e=t(`<h2 id="元组类型" tabindex="-1"><a class="header-anchor" href="#元组类型"><span>元组类型</span></a></h2><blockquote><p>元组（Tuple）类型是一种有用的类型，它允许你定义一个具有固定数量和类型的元素的数组，但各个元素的类型不必相同。元组类型对于处理具有不同类型元素的数组特别有用，例如，你可以使用元组来表示具有特定结构的数据库查询结果或函数返回值。</p></blockquote><h3 id="定义泛型元组类型" tabindex="-1"><a class="header-anchor" href="#定义泛型元组类型"><span>定义泛型元组类型</span></a></h3><blockquote><p>泛型元组类型可以让你创建具有不同类型元素的数组，同时保持类型的灵活性。GenericTuple&lt;T&gt; 是一个泛型元组类型，它定义了一个包含三个相同类型 T 的元素的数组。MixedTuple 是一个具有不同类型元素的元组类型。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 定义一个泛型元组类型</span>
<span class="token keyword">type</span> <span class="token class-name">GenericTuple<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 使用泛型元组类型</span>
<span class="token keyword">const</span> tuple<span class="token operator">:</span> GenericTuple<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
<span class="token keyword">const</span> tuple2<span class="token operator">:</span> GenericTuple<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>

<span class="token comment">// 定义一个具有不同类型元素的泛型元组类型</span>
<span class="token keyword">type</span> <span class="token class-name">MixedTuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mixedTuple<span class="token operator">:</span> MixedTuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型对象类型中的元组类型" tabindex="-1"><a class="header-anchor" href="#泛型对象类型中的元组类型"><span>泛型对象类型中的元组类型</span></a></h3><blockquote><p>可以在对象类型中使用元组类型作为属性，或者作为函数的参数和返回值。定义一个泛型接口，包含一个元组类型的属性。TupleObject&lt;T&gt; 是一个泛型接口，它定义了一个名为 tuple 的属性，该属性是一个包含两个相同类型 T 的元素的元组。getTuple 函数接受两个相同类型的参数，并返回一个包含这两个参数的元组。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">TupleObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  tuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用泛型接口</span>
<span class="token keyword">const</span> tupleObject<span class="token operator">:</span> TupleObject<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  tuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 定义一个函数，返回一个元组类型</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getTuple</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token generic-function"><span class="token function">getTuple</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2]</span>
<span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">getTuple</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;hello&#39;, &#39;world&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","元组类型.html.vue"]]),k=JSON.parse('{"path":"/web/Ts/%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/%E6%B3%9B%E5%9E%8B%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/%E5%85%83%E7%BB%84%E7%B1%BB%E5%9E%8B.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"元组类型","slug":"元组类型","link":"#元组类型","children":[{"level":3,"title":"定义泛型元组类型","slug":"定义泛型元组类型","link":"#定义泛型元组类型","children":[]},{"level":3,"title":"泛型对象类型中的元组类型","slug":"泛型对象类型中的元组类型","link":"#泛型对象类型中的元组类型","children":[]}]}],"git":{"updatedTime":1727429003000,"contributors":[{"name":"OnionTin","email":"2775376881@qq.com","commits":2}]},"filePathRelative":"web/Ts/对象类型/泛型对象类型/元组类型.md","excerpt":"<h2>元组类型</h2>\\n<blockquote>\\n<p>元组（Tuple）类型是一种有用的类型，它允许你定义一个具有固定数量和类型的元素的数组，但各个元素的类型不必相同。元组类型对于处理具有不同类型元素的数组特别有用，例如，你可以使用元组来表示具有特定结构的数据库查询结果或函数返回值。</p>\\n</blockquote>\\n<h3>定义泛型元组类型</h3>\\n<blockquote>\\n<p>泛型元组类型可以让你创建具有不同类型元素的数组，同时保持类型的灵活性。GenericTuple&lt;T&gt; 是一个泛型元组类型，它定义了一个包含三个相同类型 T 的元素的数组。MixedTuple 是一个具有不同类型元素的元组类型。</p>\\n</blockquote>"}');export{r as comp,k as data};
