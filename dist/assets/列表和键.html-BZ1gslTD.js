import{_ as n,o as a,c as s,e as t}from"./app-C_RrakEG.js";const p={},e=t(`<h2 id="列表和键" tabindex="-1"><a class="header-anchor" href="#列表和键"><span>列表和键</span></a></h2><p>在 React 中，经常需要根据数组中的数据项渲染列表。正确地处理列表和键（Keys）对于性能优化和组件的正确行为至关重要。</p><h3 id="_1-渲染列表" tabindex="-1"><a class="header-anchor" href="#_1-渲染列表"><span>1. 渲染列表</span></a></h3><p>使用 JavaScript 的<code>map</code>函数在 JSX 中渲染数组中的每一项。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">ItemList</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> items <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用键-keys" tabindex="-1"><a class="header-anchor" href="#_2-使用键-keys"><span>2. 使用键（Keys）</span></a></h3><p>为列表中的每个元素分配一个唯一的键（key），以帮助 React 识别哪些元素改变了、添加了或者被移除了。</p><h3 id="_3-键的类型" tabindex="-1"><a class="header-anchor" href="#_3-键的类型"><span>3. 键的类型</span></a></h3><p>键可以是数字、字符串或是元素在数组中的位置，但最佳实践是使用稳定的身份标识符。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span>
  items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-避免使用数组索引作为键" tabindex="-1"><a class="header-anchor" href="#_4-避免使用数组索引作为键"><span>4. 避免使用数组索引作为键</span></a></h3><p>如果列表项可以重新排序，尽量避免使用数组索引作为键，因为这会导致性能问题和组件状态的错误。</p><h3 id="_5-键的稳定性" tabindex="-1"><a class="header-anchor" href="#_5-键的稳定性"><span>5. 键的稳定性</span></a></h3><p>键应该是稳定的、可预测的，且在组件的整个生命周期内不会变化。</p><h3 id="_6-键的作用" tabindex="-1"><a class="header-anchor" href="#_6-键的作用"><span>6. 键的作用</span></a></h3><p>键帮助 React 识别哪些元素是不同的，从而优化 DOM 操作和更新。</p><h3 id="_7-没有键的后果" tabindex="-1"><a class="header-anchor" href="#_7-没有键的后果"><span>7. 没有键的后果</span></a></h3><p>如果不提供键，React 会使用数组索引作为默认键，这可能会导致性能下降和组件状态不一致。</p><h3 id="_8-在复杂数据结构中使用键" tabindex="-1"><a class="header-anchor" href="#_8-在复杂数据结构中使用键"><span>8. 在复杂数据结构中使用键</span></a></h3><p>当渲染对象数组时，确保每个对象有一个唯一的键。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span>
  users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">User</span></span>
      <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span>
      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>user<span class="token punctuation">}</span></span>
    <span class="token punctuation">/&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-列表的动态变化" tabindex="-1"><a class="header-anchor" href="#_9-列表的动态变化"><span>9. 列表的动态变化</span></a></h3><p>当列表数据发生变化（添加、删除、排序）时，键能够帮助 React 正确地更新 DOM。</p><h3 id="_10-使用react-fragment优化列表" tabindex="-1"><a class="header-anchor" href="#_10-使用react-fragment优化列表"><span>10. 使用<code>React.Fragment</code>优化列表</span></a></h3><p>当渲染多个元素而不想添加额外的 DOM 元素时，可以使用<code>React.Fragment</code>。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">ItemList</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> items <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-使用key属性" tabindex="-1"><a class="header-anchor" href="#_11-使用key属性"><span>11. 使用<code>key</code>属性</span></a></h3><p>在渲染数组元素时，通过<code>key</code>属性传递键。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_12-避免在元素间共享键" tabindex="-1"><a class="header-anchor" href="#_12-避免在元素间共享键"><span>12. 避免在元素间共享键</span></a></h3><p>每个元素的键应该是唯一的，不要在整个应用程序中共享键。</p><h3 id="_13-键和性能" tabindex="-1"><a class="header-anchor" href="#_13-键和性能"><span>13. 键和性能</span></a></h3><p>正确使用键可以提高渲染性能，尤其是在大规模列表渲染时。</p><h3 id="_14-条件渲染列表" tabindex="-1"><a class="header-anchor" href="#_14-条件渲染列表"><span>14. 条件渲染列表</span></a></h3><p>可以在<code>map</code>回调函数中进行条件渲染。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token punctuation">{</span>
  items
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>isVisible<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-使用usememo优化列表" tabindex="-1"><a class="header-anchor" href="#_15-使用usememo优化列表"><span>15. 使用<code>useMemo</code>优化列表</span></a></h3><p>如果列表渲染涉及到高开销的操作，可以使用<code>useMemo</code>进行优化。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">computeExpensiveList</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,39),c=[e];function o(l,i){return a(),s("div",null,c)}const k=n(p,[["render",o],["__file","列表和键.html.vue"]]),r=JSON.parse('{"path":"/web/React/React%E6%8F%90%E5%8D%87/%E5%88%97%E8%A1%A8%E5%92%8C%E9%94%AE.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"列表和键","slug":"列表和键","link":"#列表和键","children":[{"level":3,"title":"1. 渲染列表","slug":"_1-渲染列表","link":"#_1-渲染列表","children":[]},{"level":3,"title":"2. 使用键（Keys）","slug":"_2-使用键-keys","link":"#_2-使用键-keys","children":[]},{"level":3,"title":"3. 键的类型","slug":"_3-键的类型","link":"#_3-键的类型","children":[]},{"level":3,"title":"4. 避免使用数组索引作为键","slug":"_4-避免使用数组索引作为键","link":"#_4-避免使用数组索引作为键","children":[]},{"level":3,"title":"5. 键的稳定性","slug":"_5-键的稳定性","link":"#_5-键的稳定性","children":[]},{"level":3,"title":"6. 键的作用","slug":"_6-键的作用","link":"#_6-键的作用","children":[]},{"level":3,"title":"7. 没有键的后果","slug":"_7-没有键的后果","link":"#_7-没有键的后果","children":[]},{"level":3,"title":"8. 在复杂数据结构中使用键","slug":"_8-在复杂数据结构中使用键","link":"#_8-在复杂数据结构中使用键","children":[]},{"level":3,"title":"9. 列表的动态变化","slug":"_9-列表的动态变化","link":"#_9-列表的动态变化","children":[]},{"level":3,"title":"10. 使用React.Fragment优化列表","slug":"_10-使用react-fragment优化列表","link":"#_10-使用react-fragment优化列表","children":[]},{"level":3,"title":"11. 使用key属性","slug":"_11-使用key属性","link":"#_11-使用key属性","children":[]},{"level":3,"title":"12. 避免在元素间共享键","slug":"_12-避免在元素间共享键","link":"#_12-避免在元素间共享键","children":[]},{"level":3,"title":"13. 键和性能","slug":"_13-键和性能","link":"#_13-键和性能","children":[]},{"level":3,"title":"14. 条件渲染列表","slug":"_14-条件渲染列表","link":"#_14-条件渲染列表","children":[]},{"level":3,"title":"15. 使用useMemo优化列表","slug":"_15-使用usememo优化列表","link":"#_15-使用usememo优化列表","children":[]}]}],"git":{"updatedTime":1728487189000,"contributors":[{"name":"OnionTin]","email":"2775376881@qq.com","commits":1}]},"filePathRelative":"web/React/React提升/列表和键.md","excerpt":"<!-- @format -->\\n<h2>列表和键</h2>\\n<p>在 React 中，经常需要根据数组中的数据项渲染列表。正确地处理列表和键（Keys）对于性能优化和组件的正确行为至关重要。</p>\\n<h3>1. 渲染列表</h3>\\n<p>使用 JavaScript 的<code>map</code>函数在 JSX 中渲染数组中的每一项。</p>\\n<div class=\\"language-jsx\\" data-ext=\\"jsx\\" data-title=\\"jsx\\"><pre class=\\"language-jsx\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">ItemList</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token punctuation\\">{</span> items <span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ul</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">\\n      </span><span class=\\"token punctuation\\">{</span>items<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">item</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">(</span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span> <span class=\\"token attr-name\\">key</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>item<span class=\\"token punctuation\\">.</span>id<span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">{</span>item<span class=\\"token punctuation\\">.</span>text<span class=\\"token punctuation\\">}</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>\\n      <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">}</span><span class=\\"token plain-text\\">\\n    </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ul</span><span class=\\"token punctuation\\">&gt;</span></span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{k as comp,r as data};
