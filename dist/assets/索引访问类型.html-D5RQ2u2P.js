import{_ as n,o as s,c as a,e}from"./app-C_RrakEG.js";const t={},p=e(`<h2 id="索引访问类型" tabindex="-1"><a class="header-anchor" href="#索引访问类型"><span>索引访问类型</span></a></h2><blockquote><p>索引访问类型（Index Access Types）允许你通过索引来查询一个类型的属性类型。这通常与 keyof 类型查询运算符结合使用，以便在编译时获取特定属性的类型。</p></blockquote><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  z<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">XType</span> <span class="token operator">=</span> Point<span class="token punctuation">[</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// XType 类型为 number</span>
<span class="token keyword">type</span> <span class="token class-name">YType</span> <span class="token operator">=</span> Point<span class="token punctuation">[</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// YType 类型为 number</span>
<span class="token keyword">type</span> <span class="token class-name">ZType</span> <span class="token operator">=</span> Point<span class="token punctuation">[</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// ZType 类型为 number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结合-keyof-使用" tabindex="-1"><a class="header-anchor" href="#结合-keyof-使用"><span>结合 keyof 使用</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  z<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Key</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Point<span class="token punctuation">;</span>
<span class="token comment">// XYType 类型为 number | number | number</span>
<span class="token keyword">type</span> <span class="token class-name">XYType</span> <span class="token operator">=</span> Point<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在函数中使用" tabindex="-1"><a class="header-anchor" href="#在函数中使用"><span>在函数中使用</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getProperty</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> point<span class="token operator">:</span> Point <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> z<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x 类型为 number</span>
<span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// y 类型为 number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="映射类型" tabindex="-1"><a class="header-anchor" href="#映射类型"><span>映射类型</span></a></h3><blockquote><p>索引访问类型也常用于创建映射类型（Mapped Types），这允许你基于现有类型创建新类型，并对每个属性应用相同的转换。在这个例子中，OptionsFlags 是一个映射类型，它将 FeatureFlags 类型中的每个属性转换为 boolean 类型。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">OptionsFlags<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">FeatureFlags</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  darkMode<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  notifications<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  betaProgram<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">FeatureOptions</span> <span class="token operator">=</span> OptionsFlags<span class="token operator">&lt;</span>FeatureFlags<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// FeatureOptions 类型为 {</span>
<span class="token comment">//   darkMode: boolean;</span>
<span class="token comment">//   notifications: boolean;</span>
<span class="token comment">//   betaProgram: boolean;</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","索引访问类型.html.vue"]]),k=JSON.parse('{"path":"/web/Ts/%E7%B1%BB%E5%9E%8B%E6%93%8D%E4%BD%9C/%E7%B4%A2%E5%BC%95%E8%AE%BF%E9%97%AE%E7%B1%BB%E5%9E%8B.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"索引访问类型","slug":"索引访问类型","link":"#索引访问类型","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"结合 keyof 使用","slug":"结合-keyof-使用","link":"#结合-keyof-使用","children":[]},{"level":3,"title":"在函数中使用","slug":"在函数中使用","link":"#在函数中使用","children":[]},{"level":3,"title":"映射类型","slug":"映射类型","link":"#映射类型","children":[]}]}],"git":{"updatedTime":1727429003000,"contributors":[{"name":"OnionTin","email":"2775376881@qq.com","commits":2}]},"filePathRelative":"web/Ts/类型操作/索引访问类型.md","excerpt":"<h2>索引访问类型</h2>\\n<blockquote>\\n<p>索引访问类型（Index Access Types）允许你通过索引来查询一个类型的属性类型。这通常与 keyof 类型查询运算符结合使用，以便在编译时获取特定属性的类型。</p>\\n</blockquote>\\n<h3>基本用法</h3>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">Point</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  x<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">;</span>\\n  y<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">;</span>\\n  z<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">XType</span> <span class=\\"token operator\\">=</span> Point<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"x\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// XType 类型为 number</span>\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">YType</span> <span class=\\"token operator\\">=</span> Point<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"y\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// YType 类型为 number</span>\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">ZType</span> <span class=\\"token operator\\">=</span> Point<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"z\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// ZType 类型为 number</span>\\n</code></pre></div>"}');export{r as comp,k as data};
