import{_ as n,o as s,c as a,e as t}from"./app-C_RrakEG.js";const e={},p=t(`<h2 id="自定义-hooks" tabindex="-1"><a class="header-anchor" href="#自定义-hooks"><span>自定义 Hooks</span></a></h2><p>自定义 Hooks 是一种在 React 中复用状态逻辑的高级技巧。它们让你可以在多个组件之间重用状态逻辑而不必直接复用类组件的代码。通过封装状态逻辑和副作用，自定义 Hooks 让你的组件更加简洁和清晰。</p><h3 id="_1-使用-hooks-的规则" tabindex="-1"><a class="header-anchor" href="#_1-使用-hooks-的规则"><span>1. 使用 Hooks 的规则</span></a></h3><ul><li>只能在函数组件的顶层使用 Hooks。</li><li>不要在循环、条件语句或嵌套函数中调用 Hooks。</li></ul><h3 id="_2-创建自定义-hook" tabindex="-1"><a class="header-anchor" href="#_2-创建自定义-hook"><span>2. 创建自定义 Hook</span></a></h3><p>自定义 Hook 是通过在函数前面加上<code>use</code>前缀来创建的，它是一个 JavaScript 函数。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">useMyCustomHook</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...状态逻辑</span>
  <span class="token keyword">return</span> someValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-使用-usestate-和-useeffect" tabindex="-1"><a class="header-anchor" href="#_3-使用-usestate-和-useeffect"><span>3. 使用 useState 和 useEffect</span></a></h3><p>自定义 Hooks 内部可以使用其他 Hooks，如<code>useState</code>和<code>useEffect</code>。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> setUser<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">fetchUser</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setUser</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">fetchUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> user<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-暴露公共-api" tabindex="-1"><a class="header-anchor" href="#_4-暴露公共-api"><span>4. 暴露公共 API</span></a></h3><p>自定义 Hook 应该暴露一个公共 API，这样其他组件就可以使用它。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...状态逻辑</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> user<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-参数化" tabindex="-1"><a class="header-anchor" href="#_5-参数化"><span>5. 参数化</span></a></h3><p>自定义 Hook 可以接受参数，使其更加灵活和通用。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">useFetchData</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isLoading<span class="token punctuation">,</span> setIsLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">,</span> setError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> jsonData <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setData</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-使用自定义-hook" tabindex="-1"><a class="header-anchor" href="#_6-使用自定义-hook"><span>6. 使用自定义 Hook</span></a></h3><p>在组件中使用自定义 Hook，就像使用内置 Hook 一样。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">UserProfile</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> userName <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">useUser</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-命名约定" tabindex="-1"><a class="header-anchor" href="#_7-命名约定"><span>7. 命名约定</span></a></h3><p>自定义 Hook 的命名应该以<code>use</code>为前缀，并且能够清晰地表达其功能。</p><h3 id="_8-避免副作用" tabindex="-1"><a class="header-anchor" href="#_8-避免副作用"><span>8. 避免副作用</span></a></h3><p>自定义 Hook 的主要目的是封装状态逻辑，而不是副作用。副作用应该在组件内部使用<code>useEffect</code>处理。</p><h3 id="_9-使用自定义-hook-进行性能优化" tabindex="-1"><a class="header-anchor" href="#_9-使用自定义-hook-进行性能优化"><span>9. 使用自定义 Hook 进行性能优化</span></a></h3><p>自定义 Hook 可以用于封装性能优化逻辑，如 memoization、throttling 或 debouncing。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">useDebounce</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>debouncedValue<span class="token punctuation">,</span> setDebouncedValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setDebouncedValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> delay<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> debouncedValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-自定义-hook-的组合" tabindex="-1"><a class="header-anchor" href="#_10-自定义-hook-的组合"><span>10. 自定义 Hook 的组合</span></a></h3><p>你可以创建多个自定义 Hook，并将它们组合起来使用。</p>`,28),o=[p];function c(l,u){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","自定义Hooks.html.vue"]]),r=JSON.parse('{"path":"/web/React/React%E6%8F%90%E5%8D%87/%E8%87%AA%E5%AE%9A%E4%B9%89Hooks.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"自定义 Hooks","slug":"自定义-hooks","link":"#自定义-hooks","children":[{"level":3,"title":"1. 使用 Hooks 的规则","slug":"_1-使用-hooks-的规则","link":"#_1-使用-hooks-的规则","children":[]},{"level":3,"title":"2. 创建自定义 Hook","slug":"_2-创建自定义-hook","link":"#_2-创建自定义-hook","children":[]},{"level":3,"title":"3. 使用 useState 和 useEffect","slug":"_3-使用-usestate-和-useeffect","link":"#_3-使用-usestate-和-useeffect","children":[]},{"level":3,"title":"4. 暴露公共 API","slug":"_4-暴露公共-api","link":"#_4-暴露公共-api","children":[]},{"level":3,"title":"5. 参数化","slug":"_5-参数化","link":"#_5-参数化","children":[]},{"level":3,"title":"6. 使用自定义 Hook","slug":"_6-使用自定义-hook","link":"#_6-使用自定义-hook","children":[]},{"level":3,"title":"7. 命名约定","slug":"_7-命名约定","link":"#_7-命名约定","children":[]},{"level":3,"title":"8. 避免副作用","slug":"_8-避免副作用","link":"#_8-避免副作用","children":[]},{"level":3,"title":"9. 使用自定义 Hook 进行性能优化","slug":"_9-使用自定义-hook-进行性能优化","link":"#_9-使用自定义-hook-进行性能优化","children":[]},{"level":3,"title":"10. 自定义 Hook 的组合","slug":"_10-自定义-hook-的组合","link":"#_10-自定义-hook-的组合","children":[]}]}],"git":{"updatedTime":1728487189000,"contributors":[{"name":"OnionTin]","email":"2775376881@qq.com","commits":1}]},"filePathRelative":"web/React/React提升/自定义Hooks.md","excerpt":"<!-- @format -->\\n<h2>自定义 Hooks</h2>\\n<p>自定义 Hooks 是一种在 React 中复用状态逻辑的高级技巧。它们让你可以在多个组件之间重用状态逻辑而不必直接复用类组件的代码。通过封装状态逻辑和副作用，自定义 Hooks 让你的组件更加简洁和清晰。</p>\\n<h3>1. 使用 Hooks 的规则</h3>\\n<ul>\\n<li>只能在函数组件的顶层使用 Hooks。</li>\\n<li>不要在循环、条件语句或嵌套函数中调用 Hooks。</li>\\n</ul>\\n<h3>2. 创建自定义 Hook</h3>\\n<p>自定义 Hook 是通过在函数前面加上<code>use</code>前缀来创建的，它是一个 JavaScript 函数。</p>"}');export{k as comp,r as data};
