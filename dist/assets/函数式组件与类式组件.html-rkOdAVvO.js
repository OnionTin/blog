import{_ as n,o as s,c as a,e as t}from"./app-C_RrakEG.js";const e={},p=t(`<h2 id="函数式组件与类式组件" tabindex="-1"><a class="header-anchor" href="#函数式组件与类式组件"><span>函数式组件与类式组件</span></a></h2><h3 id="函数式组件的定义" tabindex="-1"><a class="header-anchor" href="#函数式组件的定义"><span>函数式组件的定义</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1.创建类式组件</span>
<span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// render是放在哪里的?-MyComponent的原型对象上，供实例使用。</span>
    <span class="token comment">// render中的this是谁?-MyComponent的实例对象&lt;=&gt;MyComponent组件实例对象。</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;render中的this:&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token function">我是用类定义的组件</span><span class="token punctuation">(</span>适用于<span class="token punctuation">[</span>复杂组件<span class="token punctuation">]</span>的定义<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2.渲染组件到页面</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
执行了ReactDOM.render(&lt;MyComponent/&gt;......之后，发生了什么?
1.React解析组件标签，找到了MyComponent组件。
2.发现组件是使用类定义的,随后new出来该类的实例,并通过该实例调用到原型上的render方法。
3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类式组件" tabindex="-1"><a class="header-anchor" href="#类式组件"><span>类式组件</span></a></h3><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 1.创建函数式组件</span>
<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此处的this是undefined，因为babel编译后开启了严格模式</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我是用函数定义的组件(适用于[简单组件]的定义)</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2.渲染组件到页面</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
执行了ReactDOM.render(&lt;MyComponent/&gt;......之后，发生了什么?
1.React解析组件标签，找到了MyComponent组件。
2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复杂组件" tabindex="-1"><a class="header-anchor" href="#复杂组件"><span>复杂组件</span></a></h3><blockquote><p>类组件中，有 state 就是复杂的，否则就是简单组件;或者说有状态的就是复杂组件。</p></blockquote>`,7),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","函数式组件与类式组件.html.vue"]]),k=JSON.parse('{"path":"/web/React/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6%E4%B8%8E%E7%B1%BB%E5%BC%8F%E7%BB%84%E4%BB%B6.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"函数式组件与类式组件","slug":"函数式组件与类式组件","link":"#函数式组件与类式组件","children":[{"level":3,"title":"函数式组件的定义","slug":"函数式组件的定义","link":"#函数式组件的定义","children":[]},{"level":3,"title":"类式组件","slug":"类式组件","link":"#类式组件","children":[]},{"level":3,"title":"复杂组件","slug":"复杂组件","link":"#复杂组件","children":[]}]}],"git":{"updatedTime":1727684271000,"contributors":[{"name":"OnionTin","email":"2775376881@qq.com","commits":2}]},"filePathRelative":"web/React/函数式组件与类式组件.md","excerpt":"<h2>函数式组件与类式组件</h2>\\n<h3>函数式组件的定义</h3>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 1.创建类式组件</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyComponent</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">React<span class=\\"token punctuation\\">.</span>Component</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// render是放在哪里的?-MyComponent的原型对象上，供实例使用。</span>\\n    <span class=\\"token comment\\">// render中的this是谁?-MyComponent的实例对象&lt;=&gt;MyComponent组件实例对象。</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"render中的this:\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">&lt;</span>h2<span class=\\"token operator\\">&gt;</span><span class=\\"token function\\">我是用类定义的组件</span><span class=\\"token punctuation\\">(</span>适用于<span class=\\"token punctuation\\">[</span>复杂组件<span class=\\"token punctuation\\">]</span>的定义<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>h2<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 2.渲染组件到页面</span>\\nReactDOM<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&lt;</span>MyComponent <span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">,</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementById</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"test\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">/*\\n执行了ReactDOM.render(&lt;MyComponent/&gt;......之后，发生了什么?\\n1.React解析组件标签，找到了MyComponent组件。\\n2.发现组件是使用类定义的,随后new出来该类的实例,并通过该实例调用到原型上的render方法。\\n3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。\\n*/</span>\\n</code></pre></div>"}');export{r as comp,k as data};
