import{_ as a,r as t,o as p,c as e,d as o,w as c,e as n,b as l}from"./app-C_RrakEG.js";const i={},u=n(`<h2 id="redux" tabindex="-1"><a class="header-anchor" href="#redux"><span>redux</span></a></h2><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>createStore</td><td>用来将 state 存入 store;</td></tr><tr><td>store.getState</td><td>获取状态;</td></tr><tr><td>store.dispath(type, data):</td><td>触发的条件和值;</td></tr><tr><td>store.subscribe</td><td>检测 store 中数据的变化后 render 页面;</td></tr><tr><td>reducer(preSatate, action)：</td><td>处理状态的纯函数；传入之前的状态和一个对象, 返回一个新的状态；</td></tr><tr><td>mapStateToProps</td><td>将 state 映射到 props;</td></tr><tr><td>mapDispatchToProps</td><td>将 dispatch 映射到 props;</td></tr><tr><td>Provider</td><td>向子组件暴漏数据(生产者);</td></tr><tr><td>Consumer</td><td>接收父组件传值(消费者);</td></tr><tr><td>connect</td><td>连接 react 和 redux;</td></tr><tr><td>createContext</td><td>解决无需层级关系传递,Provider 传递,Consumer 接收;</td></tr><tr><td>useContext</td><td>使用 useContext 接受上下文，因为传入的是对象，则接受的也应该是对象;</td></tr><tr><td>combineReducers</td><td>合并 reducer;</td></tr><tr><td>applyMiddleware</td><td>中间件;</td></tr><tr><td>compose</td><td>组合函数;</td></tr><tr><td>bindActionCreators</td><td>将 dispatch 和 actionCreator 绑定;</td></tr><tr><td>redux-thunk</td><td>异步 action;</td></tr><tr><td>redux-saga</td><td>异步 action;</td></tr><tr><td>redux-promise</td><td>异步 action;</td></tr></tbody></table><blockquote><p>明确两个概念：</p><ol><li>UI 组件：不能使用任何 Redux 的 API，只负责页面的呈现和交互。</li><li>容器组件：负责与 Redux 通信，将结果传递给 UI 组件。</li></ol><p>如何创建一个容器组件：</p><p>通过使用 react-redux 的 connect 函数。 connect 函数接受两个参数：mapStateToProps 和 mapDispatchToProps。 mapStateToProps：映射状态，用于将 Redux 的状态映射到 UI 组件的 props。 mapDispatchToProps：映射操作状态的方法，返回值是一个对象。</p><p>注意：</p><p>容器组件中的 store 是通过 props 传递进去的，而不是在容器组件中直接引入。</p></blockquote><blockquote><p>connect(参数, 方法)(UI 组件): 容器组件，用来链接 ui 组件和 redux 的，ui 组件只能用来展示，所以必须在外层包裹一个容器组件做数据的处理工作；(注意: 因为 react-redux 帮做处理了,所以 store 和其中的 state 和 dispatch 就可以直接拿到了)</p></blockquote><blockquote><p>reducer 必须是纯函数，纯函数: redux 中数组的处理不能用 push 和 unshift 的原因，不是纯函数，改变了原来的数组的引用类型数组的指向，改变了原数组，不能用，所以只能用[...oldArr, data]；用[...oldArr],原本的 oldArr 没有改变。</p></blockquote><h3 id="整体案例一" tabindex="-1"><a class="header-anchor" href="#整体案例一"><span>整体案例一</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> combineReducers<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">&quot;redux-thunk&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createLogger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux-logger&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// userStore</span>
<span class="token keyword">const</span> userReducer <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;CHANGE_NAME&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> action<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// bookStore</span>
<span class="token keyword">const</span> bookReducer <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;JavaScript 高级程序设计&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;CHANGE_BOOK&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> action<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 合并 reducer</span>
<span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> userReducer<span class="token punctuation">,</span>
  <span class="token literal-property property">book</span><span class="token operator">:</span> bookReducer<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 中间件</span>
<span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// UI 组件</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 容器组件</span>
<span class="token keyword">const</span> UserContainer <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// mapStateToProps</span>
  <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">changeName</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;CHANGE_NAME&quot;</span><span class="token punctuation">,</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// mapDispatchToProps</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// UI 组件</span>
<span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 容器组件</span>
<span class="token keyword">const</span> BookContainer <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> state<span class="token punctuation">.</span>book<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">changeBook</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;CHANGE_BOOK&quot;</span><span class="token punctuation">,</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span>Book<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// UI 组件</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>UserContainer <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>BookContainer <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="整体案例二" tabindex="-1"><a class="header-anchor" href="#整体案例二"><span>整体案例二</span></a></h3><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// UI组件</span>
state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">carName</span><span class="token operator">:</span> <span class="token string">&#39;奔驰c63&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 加法</span>
<span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectNumber<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">jia</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 减法</span>
<span class="token function-variable function">decrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectNumber<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">jian</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 奇数再加</span>
<span class="token function-variable function">incrementIfOdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectNumber<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 异步加</span>
<span class="token function-variable function">incrementAsync</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectNumber<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;UI组件接收到的props是&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">当前求和为: </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectNumber <span class="token operator">=</span> c<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 将UI组件与Redux连接</span>
<span class="token comment">// 引入Count的UI组件</span>
<span class="token keyword">import</span> CountUI <span class="token keyword">from</span> <span class="token string">&quot;../../components/Count&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入redux的createStore函数，用于创建redux中最为核心的store对象</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createIncrementAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../redux/count_action&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入connect用于连接UI组件与redux</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 函数返回的对象中的key就作为传递给UI组件props的key</span>
<span class="token comment">// value就作为传递给UI组件props的value状态</span>
<span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 函数返回的对象中的key就作为传递给UI组件props的key</span>
<span class="token comment">// value就作为传递给UI组件props的value操作</span>
<span class="token keyword">function</span> <span class="token function">mapDispatchToProps</span><span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">jia</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createIncrementAction</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用connect()()创建并暴露一个Count的容器组件</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>CountUI<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 如何使用connect函数的简写形式来连接UI组件和Redux</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// mapDispatchToProps的一般写法</span>
  <span class="token parameter">dispatch</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">jia</span><span class="token operator">:</span> <span class="token parameter">number</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createIncrementAction</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">jian</span><span class="token operator">:</span> <span class="token parameter">number</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createDecrementAction</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">jiaAsync</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">number<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createIncrementAsyncAction</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// mapDispatchToProps的简写</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">jia</span><span class="token operator">:</span> createIncrementAction<span class="token punctuation">,</span>
    <span class="token literal-property property">jian</span><span class="token operator">:</span> createDecrementAction<span class="token punctuation">,</span>
    <span class="token literal-property property">jiaAsync</span><span class="token operator">:</span> createIncrementAsyncAction<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span>CountUI<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="纯函数" tabindex="-1"><a class="header-anchor" href="#纯函数"><span>纯函数</span></a></h3><blockquote><p>纯函数是一类特别的函数，它们必须遵守以下约束：</p></blockquote><ol><li><strong>相同的输入总是得到相同的输出</strong>：只要是同样的输入（实参），必定得到同样的输出（返回）。</li><li><strong>必须遵守的约束</strong>： <ol><li>不得改写参数数据。</li><li>不会产生任何副作用，例如网络请求，输入和输出设备。</li><li>不能调用 <code>Date.now()</code> 或 <code>Math.random()</code> 等不纯的方法。</li></ol></li></ol>`,14),r=n('<h3 id="高阶函数" tabindex="-1"><a class="header-anchor" href="#高阶函数"><span>高阶函数</span></a></h3><blockquote><p>高阶函数是一类特别的函数，它们可以：</p></blockquote><ol><li><strong>参数是函数</strong>：接收一个或多个函数作为参数。</li><li><strong>返回是函数</strong>：返回一个函数。</li><li><strong>定时器设置函数</strong>：如 <code>setTimeout</code> 或 <code>setInterval</code>，它们的回调参数是一个函数。</li><li><strong>数组的方法</strong>： <ul><li><code>forEach()</code></li><li><code>map()</code></li><li><code>filter()</code></li><li><code>reduce()</code></li><li><code>find()</code></li><li><code>bind()</code></li></ul></li></ol>',3);function d(k,v){const s=t("font");return p(),e("div",null,[u,o(s,{color:"red"},{default:c(()=>[l("Redux 的 `reducer` 函数必须是一个纯函数。")]),_:1}),r])}const b=a(i,[["render",d],["__file","redux.html.vue"]]),g=JSON.parse('{"path":"/web/React/redux.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"redux","slug":"redux","link":"#redux","children":[{"level":3,"title":"整体案例一","slug":"整体案例一","link":"#整体案例一","children":[]},{"level":3,"title":"整体案例二","slug":"整体案例二","link":"#整体案例二","children":[]},{"level":3,"title":"纯函数","slug":"纯函数","link":"#纯函数","children":[]},{"level":3,"title":"高阶函数","slug":"高阶函数","link":"#高阶函数","children":[]}]}],"git":{"updatedTime":1727679545000,"contributors":[{"name":"OnionTin","email":"2775376881@qq.com","commits":3}]},"filePathRelative":"web/React/redux.md","excerpt":"<h2>redux</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>名称</th>\\n<th>作用</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>createStore</td>\\n<td>用来将 state 存入 store;</td>\\n</tr>\\n<tr>\\n<td>store.getState</td>\\n<td>获取状态;</td>\\n</tr>\\n<tr>\\n<td>store.dispath(type, data):</td>\\n<td>触发的条件和值;</td>\\n</tr>\\n<tr>\\n<td>store.subscribe</td>\\n<td>检测 store 中数据的变化后 render 页面;</td>\\n</tr>\\n<tr>\\n<td>reducer(preSatate, action)：</td>\\n<td>处理状态的纯函数；传入之前的状态和一个对象, 返回一个新的状态；</td>\\n</tr>\\n<tr>\\n<td>mapStateToProps</td>\\n<td>将 state 映射到 props;</td>\\n</tr>\\n<tr>\\n<td>mapDispatchToProps</td>\\n<td>将 dispatch 映射到 props;</td>\\n</tr>\\n<tr>\\n<td>Provider</td>\\n<td>向子组件暴漏数据(生产者);</td>\\n</tr>\\n<tr>\\n<td>Consumer</td>\\n<td>接收父组件传值(消费者);</td>\\n</tr>\\n<tr>\\n<td>connect</td>\\n<td>连接 react 和 redux;</td>\\n</tr>\\n<tr>\\n<td>createContext</td>\\n<td>解决无需层级关系传递,Provider 传递,Consumer 接收;</td>\\n</tr>\\n<tr>\\n<td>useContext</td>\\n<td>使用 useContext 接受上下文，因为传入的是对象，则接受的也应该是对象;</td>\\n</tr>\\n<tr>\\n<td>combineReducers</td>\\n<td>合并 reducer;</td>\\n</tr>\\n<tr>\\n<td>applyMiddleware</td>\\n<td>中间件;</td>\\n</tr>\\n<tr>\\n<td>compose</td>\\n<td>组合函数;</td>\\n</tr>\\n<tr>\\n<td>bindActionCreators</td>\\n<td>将 dispatch 和 actionCreator 绑定;</td>\\n</tr>\\n<tr>\\n<td>redux-thunk</td>\\n<td>异步 action;</td>\\n</tr>\\n<tr>\\n<td>redux-saga</td>\\n<td>异步 action;</td>\\n</tr>\\n<tr>\\n<td>redux-promise</td>\\n<td>异步 action;</td>\\n</tr>\\n</tbody>\\n</table>"}');export{b as comp,g as data};
