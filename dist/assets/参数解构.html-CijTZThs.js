import{_ as n,o as s,c as a,e as t}from"./app-C_RrakEG.js";const p={},o=t(`<h2 id="参数解构" tabindex="-1"><a class="header-anchor" href="#参数解构"><span>参数解构</span></a></h2><blockquote><p>参数解构（Parameter Destructuring）是一种方便的功能，允许你在函数调用时直接解构传递给函数的参数。这意味着你可以在函数体内直接访问对象或数组的特定属性或元素，而不需要显式地从参数中提取它们。</p></blockquote><h3 id="对象参数解构" tabindex="-1"><a class="header-anchor" href="#对象参数解构"><span>对象参数解构</span></a></h3><blockquote><p>当你的函数接受一个对象作为参数时，你可以在函数定义时直接解构这个对象。greetUser 函数在参数定义时解构了 User 对象，并且为 email 提供了一个默认值。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  email<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 可选属性</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用解构</span>
<span class="token keyword">function</span> <span class="token function">greetUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email <span class="token operator">=</span> <span class="token string">&quot;no email provided&quot;</span> <span class="token punctuation">}</span><span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">! You are </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Your email is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;No email provided.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token string">&quot;alice@example.com&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">greetUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组参数解构" tabindex="-1"><a class="header-anchor" href="#数组参数解构"><span>数组参数解构</span></a></h3><blockquote><p>类似地，如果函数接受一个数组作为参数，你也可以解构这个数组</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用解构</span>
<span class="token keyword">function</span> <span class="token function">sumValues</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sumValues</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="默认参数值" tabindex="-1"><a class="header-anchor" href="#默认参数值"><span>默认参数值</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  width <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">,</span>
  height <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">,</span>
  color <span class="token operator">=</span> <span class="token string">&quot;white&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  width<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  height<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  color<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Config: width=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, height=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>height<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, color=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token number">1024</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用部分参数和默认值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","参数解构.html.vue"]]),r=JSON.parse('{"path":"/web/Ts/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0/%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%84.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"参数解构","slug":"参数解构","link":"#参数解构","children":[{"level":3,"title":"对象参数解构","slug":"对象参数解构","link":"#对象参数解构","children":[]},{"level":3,"title":"数组参数解构","slug":"数组参数解构","link":"#数组参数解构","children":[]},{"level":3,"title":"默认参数值","slug":"默认参数值","link":"#默认参数值","children":[]}]}],"git":{"updatedTime":1727255714000,"contributors":[{"name":"OnionTin","email":"2775376881@qq.com","commits":1}]},"filePathRelative":"web/Ts/关于函数/参数解构.md","excerpt":"<h2>参数解构</h2>\\n<blockquote>\\n<p>参数解构（Parameter Destructuring）是一种方便的功能，允许你在函数调用时直接解构传递给函数的参数。这意味着你可以在函数体内直接访问对象或数组的特定属性或元素，而不需要显式地从参数中提取它们。</p>\\n</blockquote>\\n<h3>对象参数解构</h3>\\n<blockquote>\\n<p>当你的函数接受一个对象作为参数时，你可以在函数定义时直接解构这个对象。greetUser 函数在参数定义时解构了 User 对象，并且为 email 提供了一个默认值。</p>\\n</blockquote>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">User</span> <span class=\\"token punctuation\\">{</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span>\\n  age<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">;</span>\\n  email<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 可选属性</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">greet</span><span class=\\"token punctuation\\">(</span>user<span class=\\"token operator\\">:</span> User<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">Hello, </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>user<span class=\\"token punctuation\\">.</span>name<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">!</span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 使用解构</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">greetUser</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> name<span class=\\"token punctuation\\">,</span> age<span class=\\"token punctuation\\">,</span> email <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"no email provided\\"</span> <span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">:</span> User<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">Hello, </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>name<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">! You are </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>age<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\"> years old.</span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>email<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">Your email is </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>email<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">.</span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"No email provided.\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">const</span> user <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> name<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Alice\\"</span><span class=\\"token punctuation\\">,</span> age<span class=\\"token operator\\">:</span> <span class=\\"token number\\">30</span><span class=\\"token punctuation\\">,</span> email<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"alice@example.com\\"</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token function\\">greetUser</span><span class=\\"token punctuation\\">(</span>user<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>"}');export{k as comp,r as data};
