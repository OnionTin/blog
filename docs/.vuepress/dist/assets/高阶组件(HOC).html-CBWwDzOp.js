import{_ as n,o as s,c as a,e as t}from"./app-CilA4iky.js";const p={},e=t(`<h2 id="react-中高阶组件-hoc" tabindex="-1"><a class="header-anchor" href="#react-中高阶组件-hoc"><span>React 中高阶组件（HOC）</span></a></h2><p>高阶组件（Higher-Order Component）是 React 中用于重用组件逻辑的高级技术。HOC 是一个函数，它接受一个组件并返回一个新的组件。多个组件间共享逻辑，而不需要直接修改这些组件。</p><h3 id="_1-定义-hoc" tabindex="-1"><a class="header-anchor" href="#_1-定义-hoc"><span>1. 定义 HOC</span></a></h3><p>HOC 是一个函数，它接受一个 React 组件作为参数，并返回一个新的组件。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">withExtraInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> extraInfo <span class="token operator">=</span> <span class="token string">&#39;Extra info&#39;</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span>
          <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span></span>
          <span class="token attr-name">extraInfo</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>extraInfo<span class="token punctuation">}</span></span>
        <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用-hoc" tabindex="-1"><a class="header-anchor" href="#_2-使用-hoc"><span>2. 使用 HOC</span></a></h3><p>使用 HOC 时，将其作为包裹函数应用于现有的组件。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> EnhancedComponent <span class="token operator">=</span> <span class="token function">withExtraInfo</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-传递-props" tabindex="-1"><a class="header-anchor" href="#_3-传递-props"><span>3. 传递 props</span></a></h3><p>HOC 应该将所有 props 传递给被包裹的组件。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">withExtraInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> extraInfo<span class="token punctuation">,</span> <span class="token operator">...</span>otherProps <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span>
          <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>otherProps<span class="token punctuation">}</span></span>
          <span class="token attr-name">extraInfo</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>extraInfo<span class="token punctuation">}</span></span>
        <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-访问被包裹组件的-ref" tabindex="-1"><a class="header-anchor" href="#_4-访问被包裹组件的-ref"><span>4. 访问被包裹组件的 ref</span></a></h3><p>在 HOC 中，可以使用 React.forwardRef 来转发 ref。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">withExtraInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> extraInfo <span class="token operator">=</span> <span class="token string">&#39;Extra info&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span>
        <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span>
        <span class="token attr-name">extraInfo</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>extraInfo<span class="token punctuation">}</span></span>
        <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span>
      <span class="token punctuation">/&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-hoc-与函数式组件" tabindex="-1"><a class="header-anchor" href="#_5-hoc-与函数式组件"><span>5. HOC 与函数式组件</span></a></h3><p>HOC 可以用于函数式组件，通过使用 React.memo 或 React.forwardRef。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">withExtraInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> extraInfo <span class="token operator">=</span> <span class="token string">&#39;Extra info&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span>
        <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span>
        <span class="token attr-name">extraInfo</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>extraInfo<span class="token punctuation">}</span></span>
      <span class="token punctuation">/&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-使用-hoc-进行性能优化" tabindex="-1"><a class="header-anchor" href="#_6-使用-hoc-进行性能优化"><span>6. 使用 HOC 进行性能优化</span></a></h3><p>HOC 可以用来实现性能优化，如通过 React.memo 或 shouldComponentUpdate。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">withPerformanceOptimization</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> nextProps</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> prevProps<span class="token punctuation">.</span>id <span class="token operator">===</span> nextProps<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-hoc-与上下文-context" tabindex="-1"><a class="header-anchor" href="#_7-hoc-与上下文-context"><span>7. HOC 与上下文（Context）</span></a></h3><p>HOC 可以用来提供或消费上下文（Context）。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">withTheme</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">ThemedComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MyContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span>
        <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span>
        <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span>
      <span class="token punctuation">/&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-hoc-与状态管理" tabindex="-1"><a class="header-anchor" href="#_8-hoc-与状态管理"><span>8. HOC 与状态管理</span></a></h3><p>HOC 可以用来注入状态管理逻辑，如 Redux 的<code>connect</code>函数。</p><h3 id="_9-hoc-与副作用" tabindex="-1"><a class="header-anchor" href="#_9-hoc-与副作用"><span>9. HOC 与副作用</span></a></h3><p>HOC 可以用来处理组件的副作用，如数据获取。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">withData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-hoc-的注意事项" tabindex="-1"><a class="header-anchor" href="#_10-hoc-的注意事项"><span>10. HOC 的注意事项</span></a></h3><ul><li>HOC 应该保持纯净，不包含任何状态或副作用。</li><li>HOC 应该易于复用，避免过度特定化的逻辑。</li><li>HOC 可能会使组件层次变得复杂，应谨慎使用。</li></ul><h3 id="_11-hoc-与类型检查" tabindex="-1"><a class="header-anchor" href="#_11-hoc-与类型检查"><span>11. HOC 与类型检查</span></a></h3><p>在使用 HOC 时，可以使用 PropTypes 来定义被包裹组件的 props 类型。</p><h3 id="_12-hoc-与-css-样式" tabindex="-1"><a class="header-anchor" href="#_12-hoc-与-css-样式"><span>12. HOC 与 CSS 样式</span></a></h3><p>HOC 可以用来注入样式或类名。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">withStyles</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">styles</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">WithStylesComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span>
        <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span>
        <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>className<span class="token punctuation">}</span></span>
      <span class="token punctuation">/&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-hoc-与错误边界" tabindex="-1"><a class="header-anchor" href="#_13-hoc-与错误边界"><span>13. HOC 与错误边界</span></a></h3><p>HOC 可以用来创建错误边界，捕获子组件的错误。</p><h3 id="_14-hoc-与-react-hooks" tabindex="-1"><a class="header-anchor" href="#_14-hoc-与-react-hooks"><span>14. HOC 与 React Hooks</span></a></h3><p>虽然 Hooks 是推荐的代码复用方式，但 HOC 仍然可以与 Hooks 结合使用。</p>`,39),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","高阶组件(HOC).html.vue"]]),k=JSON.parse(`{"path":"/web/React/React%E6%8F%90%E5%8D%87/%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6(HOC).html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"React 中高阶组件（HOC）","slug":"react-中高阶组件-hoc","link":"#react-中高阶组件-hoc","children":[{"level":3,"title":"1. 定义 HOC","slug":"_1-定义-hoc","link":"#_1-定义-hoc","children":[]},{"level":3,"title":"2. 使用 HOC","slug":"_2-使用-hoc","link":"#_2-使用-hoc","children":[]},{"level":3,"title":"3. 传递 props","slug":"_3-传递-props","link":"#_3-传递-props","children":[]},{"level":3,"title":"4. 访问被包裹组件的 ref","slug":"_4-访问被包裹组件的-ref","link":"#_4-访问被包裹组件的-ref","children":[]},{"level":3,"title":"5. HOC 与函数式组件","slug":"_5-hoc-与函数式组件","link":"#_5-hoc-与函数式组件","children":[]},{"level":3,"title":"6. 使用 HOC 进行性能优化","slug":"_6-使用-hoc-进行性能优化","link":"#_6-使用-hoc-进行性能优化","children":[]},{"level":3,"title":"7. HOC 与上下文（Context）","slug":"_7-hoc-与上下文-context","link":"#_7-hoc-与上下文-context","children":[]},{"level":3,"title":"8. HOC 与状态管理","slug":"_8-hoc-与状态管理","link":"#_8-hoc-与状态管理","children":[]},{"level":3,"title":"9. HOC 与副作用","slug":"_9-hoc-与副作用","link":"#_9-hoc-与副作用","children":[]},{"level":3,"title":"10. HOC 的注意事项","slug":"_10-hoc-的注意事项","link":"#_10-hoc-的注意事项","children":[]},{"level":3,"title":"11. HOC 与类型检查","slug":"_11-hoc-与类型检查","link":"#_11-hoc-与类型检查","children":[]},{"level":3,"title":"12. HOC 与 CSS 样式","slug":"_12-hoc-与-css-样式","link":"#_12-hoc-与-css-样式","children":[]},{"level":3,"title":"13. HOC 与错误边界","slug":"_13-hoc-与错误边界","link":"#_13-hoc-与错误边界","children":[]},{"level":3,"title":"14. HOC 与 React Hooks","slug":"_14-hoc-与-react-hooks","link":"#_14-hoc-与-react-hooks","children":[]}]}],"git":{"updatedTime":1728487189000,"contributors":[{"name":"OnionTin]","email":"2775376881@qq.com","commits":1}]},"filePathRelative":"web/React/React提升/高阶组件(HOC).md","excerpt":"<!-- @format -->\\n<h2>React 中高阶组件（HOC）</h2>\\n<p>高阶组件（Higher-Order Component）是 React 中用于重用组件逻辑的高级技术。HOC 是一个函数，它接受一个组件并返回一个新的组件。多个组件间共享逻辑，而不需要直接修改这些组件。</p>\\n<h3>1. 定义 HOC</h3>\\n<p>HOC 是一个函数，它接受一个 React 组件作为参数，并返回一个新的组件。</p>\\n<div class=\\"language-jsx\\" data-ext=\\"jsx\\" data-title=\\"jsx\\"><pre class=\\"language-jsx\\"><code><span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">withExtraInfo</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">WrappedComponent</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">extends</span> React<span class=\\"token punctuation\\">.</span>Component <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">const</span> extraInfo <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'Extra info'</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">WrappedComponent</span></span>\\n          <span class=\\"token spread\\"><span class=\\"token punctuation\\">{</span><span class=\\"token operator\\">...</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>props<span class=\\"token punctuation\\">}</span></span>\\n          <span class=\\"token attr-name\\">extraInfo</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>extraInfo<span class=\\"token punctuation\\">}</span></span>\\n        <span class=\\"token punctuation\\">/&gt;</span></span>\\n      <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>"}`);export{r as comp,k as data};
