import{_ as n,o as s,c as a,e as t}from"./app-CvP7wor-.js";const p={},e=t(`<h2 id="react-中渲染属性-render-props" tabindex="-1"><a class="header-anchor" href="#react-中渲染属性-render-props"><span>React 中渲染属性（Render Props）</span></a></h2><p>渲染属性（Render Props）是一种在 React 中共享代码的模式，它涉及到一个组件接收一个函数作为 props，然后调用这个函数来决定其渲染逻辑。可以在组件间共享渲染逻辑，而不需要直接修改这些组件。</p><h3 id="_1-定义渲染属性" tabindex="-1"><a class="header-anchor" href="#_1-定义渲染属性"><span>1. 定义渲染属性</span></a></h3><p>渲染属性是一种模式，其中一个组件将渲染逻辑外包给通过 props 传递的函数。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-使用渲染属性" tabindex="-1"><a class="header-anchor" href="#_2-使用渲染属性"><span>2. 使用渲染属性</span></a></h3><p>子组件通过调用传递的函数来决定如何渲染内容。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> render <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">render</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-传递复杂的数据结构" tabindex="-1"><a class="header-anchor" href="#_3-传递复杂的数据结构"><span>3. 传递复杂的数据结构</span></a></h3><p>渲染属性不仅可以传递字符串，还可以传递对象、数组或其他复杂的数据结构。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> render <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">emphasis</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-与高阶组件结合" tabindex="-1"><a class="header-anchor" href="#_4-与高阶组件结合"><span>4. 与高阶组件结合</span></a></h3><p>渲染属性经常与高阶组件（HOC）结合使用，以提供额外的逻辑或数据。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">withData</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Kimi&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span>
        <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span>
        <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span>
      <span class="token punctuation">/&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> EnhancedComponent <span class="token operator">=</span> <span class="token function">withData</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-传递多个渲染函数" tabindex="-1"><a class="header-anchor" href="#_5-传递多个渲染函数"><span>5. 传递多个渲染函数</span></a></h3><p>可以传递多个函数来处理不同的渲染逻辑。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> renderHeader<span class="token punctuation">,</span> renderContent <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token function">renderHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Header&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token function">renderContent</span><span class="token punctuation">(</span><span class="token string">&#39;Content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-性能考虑" tabindex="-1"><a class="header-anchor" href="#_6-性能考虑"><span>6. 性能考虑</span></a></h3><p>过度使用渲染属性可能会导致性能问题，因为每次组件渲染时都会调用函数。</p><h3 id="_7-避免过度使用" tabindex="-1"><a class="header-anchor" href="#_7-避免过度使用"><span>7. 避免过度使用</span></a></h3><p>渲染属性模式可以增加代码的复杂性，因此应该在确实需要时才使用。</p><h3 id="_8-与-hooks-结合" tabindex="-1"><a class="header-anchor" href="#_8-与-hooks-结合"><span>8. 与 Hooks 结合</span></a></h3><p>在函数组件中，可以使用<code>useCallback</code> Hook 来创建稳定的渲染函数。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">render</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-渲染属性与上下文" tabindex="-1"><a class="header-anchor" href="#_9-渲染属性与上下文"><span>9. 渲染属性与上下文</span></a></h3><p>渲染属性可以与 Context API 结合使用，以在组件树中传递渲染逻辑。</p><h3 id="_10-条件渲染" tabindex="-1"><a class="header-anchor" href="#_10-条件渲染"><span>10. 条件渲染</span></a></h3><p>可以使用渲染属性来实现条件渲染。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> condition<span class="token punctuation">,</span> render <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> condition <span class="token operator">?</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;Content&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-与children属性结合" tabindex="-1"><a class="header-anchor" href="#_11-与children属性结合"><span>11. 与<code>children</code>属性结合</span></a></h3><p>渲染属性可以与<code>children</code>属性结合使用，以提供更灵活的渲染方式。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">emphasis</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">children</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-自定义-hook" tabindex="-1"><a class="header-anchor" href="#_12-自定义-hook"><span>12. 自定义 Hook</span></a></h3><p>可以使用自定义 Hook 来实现渲染属性的逻辑，以便在多个组件间重用。</p><h3 id="_13-调试" tabindex="-1"><a class="header-anchor" href="#_13-调试"><span>13. 调试</span></a></h3><p>渲染属性可以用于调试目的，例如通过传递一个函数来记录组件的渲染输出。</p><p>渲染属性是一种强大的模式，正确使用渲染属性可以提高代码的可维护性和复用性。</p>`,37),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","渲染props.html.vue"]]),k=JSON.parse('{"path":"/web/React/React%E6%8F%90%E5%8D%87/%E6%B8%B2%E6%9F%93props.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"React 中渲染属性（Render Props）","slug":"react-中渲染属性-render-props","link":"#react-中渲染属性-render-props","children":[{"level":3,"title":"1. 定义渲染属性","slug":"_1-定义渲染属性","link":"#_1-定义渲染属性","children":[]},{"level":3,"title":"2. 使用渲染属性","slug":"_2-使用渲染属性","link":"#_2-使用渲染属性","children":[]},{"level":3,"title":"3. 传递复杂的数据结构","slug":"_3-传递复杂的数据结构","link":"#_3-传递复杂的数据结构","children":[]},{"level":3,"title":"4. 与高阶组件结合","slug":"_4-与高阶组件结合","link":"#_4-与高阶组件结合","children":[]},{"level":3,"title":"5. 传递多个渲染函数","slug":"_5-传递多个渲染函数","link":"#_5-传递多个渲染函数","children":[]},{"level":3,"title":"6. 性能考虑","slug":"_6-性能考虑","link":"#_6-性能考虑","children":[]},{"level":3,"title":"7. 避免过度使用","slug":"_7-避免过度使用","link":"#_7-避免过度使用","children":[]},{"level":3,"title":"8. 与 Hooks 结合","slug":"_8-与-hooks-结合","link":"#_8-与-hooks-结合","children":[]},{"level":3,"title":"9. 渲染属性与上下文","slug":"_9-渲染属性与上下文","link":"#_9-渲染属性与上下文","children":[]},{"level":3,"title":"10. 条件渲染","slug":"_10-条件渲染","link":"#_10-条件渲染","children":[]},{"level":3,"title":"11. 与children属性结合","slug":"_11-与children属性结合","link":"#_11-与children属性结合","children":[]},{"level":3,"title":"12. 自定义 Hook","slug":"_12-自定义-hook","link":"#_12-自定义-hook","children":[]},{"level":3,"title":"13. 调试","slug":"_13-调试","link":"#_13-调试","children":[]}]}],"git":{"updatedTime":1728487189000,"contributors":[{"name":"OnionTin]","email":"2775376881@qq.com","commits":1}]},"filePathRelative":"web/React/React提升/渲染props.md","excerpt":"<!-- @format -->\\n<h2>React 中渲染属性（Render Props）</h2>\\n<p>渲染属性（Render Props）是一种在 React 中共享代码的模式，它涉及到一个组件接收一个函数作为 props，然后调用这个函数来决定其渲染逻辑。可以在组件间共享渲染逻辑，而不需要直接修改这些组件。</p>\\n<h3>1. 定义渲染属性</h3>\\n<p>渲染属性是一种模式，其中一个组件将渲染逻辑外包给通过 props 传递的函数。</p>\\n<div class=\\"language-jsx\\" data-ext=\\"jsx\\" data-title=\\"jsx\\"><pre class=\\"language-jsx\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">MyComponent</span></span> <span class=\\"token attr-name\\">render</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">content</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">{</span>content<span class=\\"token punctuation\\">}</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">}</span></span> <span class=\\"token punctuation\\">/&gt;</span></span>\\n</code></pre></div>"}');export{r as comp,k as data};
