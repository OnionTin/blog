import{_ as n,o as s,c as a,e as t}from"./app-CilA4iky.js";const e={},p=t(`<h2 id="bigint" tabindex="-1"><a class="header-anchor" href="#bigint"><span>BigInt</span></a></h2><blockquote><p>BigInt 是一种特殊的数据类型，用于表示大于 2^53 - 1 的整数，这个值是 JavaScript 中可以用 Number 表示的最大整数。BigInt 可以表示任意大的整数，非常适合用于处理大整数运算，如加密算法、大数据处理等场景。</p></blockquote><h3 id="创建-bigint" tabindex="-1"><a class="header-anchor" href="#创建-bigint"><span>创建 BigInt</span></a></h3><blockquote><p>可以通过在整数后面添加 n 后缀，或者使用 BigInt() 函数创建 BigInt。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 使用 n 后缀</span>
<span class="token keyword">const</span> bigNumber1 <span class="token operator">=</span> <span class="token number">123456789012345678901234567890n</span><span class="token punctuation">;</span>
<span class="token comment">// 使用 BigInt 函数</span>
<span class="token keyword">const</span> bigNumber2 <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">&quot;123456789012345678901234567890&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bigint-运算" tabindex="-1"><a class="header-anchor" href="#bigint-运算"><span>BigInt 运算</span></a></h3><blockquote><p>BigInt 支持标准的算术运算符，如 +, -, *, / 等</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> sum <span class="token operator">=</span> bigNumber1 <span class="token operator">+</span> bigNumber2<span class="token punctuation">;</span>
<span class="token keyword">const</span> difference <span class="token operator">=</span> bigNumber1 <span class="token operator">-</span> bigNumber2<span class="token punctuation">;</span>
<span class="token keyword">const</span> product <span class="token operator">=</span> bigNumber1 <span class="token operator">*</span> bigNumber2<span class="token punctuation">;</span>
<span class="token keyword">const</span> quotient <span class="token operator">=</span> bigNumber1 <span class="token operator">/</span> bigNumber2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型检查" tabindex="-1"><a class="header-anchor" href="#类型检查"><span>类型检查</span></a></h3><blockquote><p>使用 typeof 检查 BigInt 类型时，返回值为 &quot;bigint&quot;。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">typeof</span> <span class="token number">10n</span> <span class="token operator">===</span> <span class="token string">&quot;bigint&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">typeof</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;bigint&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><blockquote><ol><li><p>BigInt 不能与 Number 类型混合运算，必须显式转换。</p></li><li><p>BigInt 不支持 Math 库中的函数。</p></li><li><p>转换 BigInt 为 Number 可能会导致精度丢失。</p></li></ol></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> theBiggestInt <span class="token operator">=</span> <span class="token number">9007199254740991n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> alsoHuge <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">9007199254740991</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> hugeString <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">&quot;9007199254740991&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>theBiggestInt <span class="token operator">===</span> alsoHuge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>theBiggestInt <span class="token operator">===</span> hugeString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token keyword">const</span> previousMaxSafe <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> maxPlusOne <span class="token operator">=</span> previousMaxSafe <span class="token operator">+</span> <span class="token number">1n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> multi <span class="token operator">=</span> previousMaxSafe <span class="token operator">*</span> <span class="token number">2n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> subtr <span class="token operator">=</span> multi <span class="token operator">-</span> <span class="token number">10n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mod <span class="token operator">=</span> multi <span class="token operator">%</span> <span class="token number">10n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bigN <span class="token operator">=</span> <span class="token number">2n</span> <span class="token operator">**</span> <span class="token number">54n</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="限制与建议" tabindex="-1"><a class="header-anchor" href="#限制与建议"><span>限制与建议</span></a></h3><blockquote><ol><li><p>精度问题：在处理非常大的数值时，使用 BigInt 可以避免 Number 类型的精度问题。</p></li><li><p>性能考虑：BigInt 操作通常比 Number 操作慢，因为它们需要自定义实现且缺乏本地硬件支持。</p></li><li><p>环境支持：确保你的运行环境支持 BigInt，例如，较老的浏览器或 Node.js 版本可能不支持。</p></li></ol></blockquote>`,16),o=[p];function i(c,l){return s(),a("div",null,o)}const u=n(e,[["render",i],["__file","BigInt.html.vue"]]),k=JSON.parse('{"path":"/web/Ts/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%9E%8B/BigInt.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"BigInt","slug":"bigint","link":"#bigint","children":[{"level":3,"title":"创建 BigInt","slug":"创建-bigint","link":"#创建-bigint","children":[]},{"level":3,"title":"BigInt 运算","slug":"bigint-运算","link":"#bigint-运算","children":[]},{"level":3,"title":"类型检查","slug":"类型检查","link":"#类型检查","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"限制与建议","slug":"限制与建议","link":"#限制与建议","children":[]}]}],"git":{"updatedTime":1727255714000,"contributors":[{"name":"OnionTin","email":"2775376881@qq.com","commits":1}]},"filePathRelative":"web/Ts/常用类型/BigInt.md","excerpt":"<h2>BigInt</h2>\\n<blockquote>\\n<p>BigInt 是一种特殊的数据类型，用于表示大于 2^53 - 1 的整数，这个值是 JavaScript 中可以用 Number 表示的最大整数。BigInt 可以表示任意大的整数，非常适合用于处理大整数运算，如加密算法、大数据处理等场景。</p>\\n</blockquote>\\n<h3>创建 BigInt</h3>\\n<blockquote>\\n<p>可以通过在整数后面添加 n 后缀，或者使用 BigInt() 函数创建 BigInt。</p>\\n</blockquote>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token comment\\">// 使用 n 后缀</span>\\n<span class=\\"token keyword\\">const</span> bigNumber1 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">123456789012345678901234567890n</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 使用 BigInt 函数</span>\\n<span class=\\"token keyword\\">const</span> bigNumber2 <span class=\\"token operator\\">=</span> <span class=\\"token function\\">BigInt</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"123456789012345678901234567890\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>"}');export{u as comp,k as data};
