import{_ as n,o as s,c as a,e as t}from"./app-CilA4iky.js";const p={},e=t(`<h2 id="类型守卫" tabindex="-1"><a class="header-anchor" href="#类型守卫"><span>类型守卫</span></a></h2><blockquote><p>类型守卫（Type Guards）是一种方式，用于在运行时检查和缩小变量的类型。当你在处理联合类型或交叉类型时，类型守卫特别有用，因为它们允许你在执行操作之前确定变量的确切类型。</p></blockquote><h3 id="基本类型守卫" tabindex="-1"><a class="header-anchor" href="#基本类型守卫"><span>基本类型守卫</span></a></h3><blockquote><p>基本类型守卫是通过使用类型谓词来实现的。类型谓词是一个表达式，它在编译时不会做任何改变，但在运行时会帮助 TypeScript 缩小变量的类型。isNumber 和 isString 函数都是类型谓词。它们返回一个布尔值，告诉 TypeScript 引擎 x 参数的类型</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> x <span class="token keyword">is</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> x <span class="token keyword">is</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用类型守卫" tabindex="-1"><a class="header-anchor" href="#使用类型守卫"><span>使用类型守卫</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> data<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token string">&quot;Hello&quot;</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNumber</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里的 data 被缩小为 number 类型</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里的 data 被缩小为 string 类型</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用户自定义类型守卫" tabindex="-1"><a class="header-anchor" href="#用户自定义类型守卫"><span>用户自定义类型守卫</span></a></h3><blockquote><p>用户自定义类型守卫通常与接口或类型别名结合使用,在这个例子中，isBird 是一个类型谓词函数，它检查 animal 是否具有 fly 方法，从而判断它是否为 Bird 类型。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>
  <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>
  <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Bird <span class="token operator">|</span> Fish <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token punctuation">{</span> fly<span class="token punctuation">,</span> layEggs <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span> swim<span class="token punctuation">,</span> layEggs <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isBird</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Bird <span class="token operator">|</span> Fish<span class="token punctuation">)</span><span class="token operator">:</span> animal <span class="token keyword">is</span> Bird <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Bird<span class="token punctuation">)</span><span class="token punctuation">.</span>fly <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类类型守卫" tabindex="-1"><a class="header-anchor" href="#类类型守卫"><span>类类型守卫</span></a></h3><blockquote><p>类类型守卫是通过检查对象是否为某个类的实例来实现的,isBird 使用 instanceof 操作符来检查 animal 是否为 Bird 的实例。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>
  <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Flying&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>
  <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Swimming&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isBird</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Bird <span class="token operator">|</span> Fish<span class="token punctuation">)</span><span class="token operator">:</span> animal <span class="token keyword">is</span> Bird <span class="token punctuation">{</span>
  <span class="token keyword">return</span> animal <span class="token keyword">instanceof</span> <span class="token class-name">Bird</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在类中使用类型守卫" tabindex="-1"><a class="header-anchor" href="#在类中使用类型守卫"><span>在类中使用类型守卫</span></a></h3><blockquote><p>类本身也可以实现类型守卫</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>
  <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Flying&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">isBird</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>
  <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Swimming&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">isBird</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isBird</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Bird <span class="token operator">|</span> Fish<span class="token punctuation">)</span><span class="token operator">:</span> animal <span class="token keyword">is</span> Bird <span class="token punctuation">{</span>
  <span class="token keyword">return</span> animal<span class="token punctuation">.</span><span class="token function">isBird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","类型守卫.html.vue"]]),r=JSON.parse('{"path":"/web/Ts/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%9E%8B/%E7%B1%BB%E5%9E%8B%E5%AE%88%E5%8D%AB.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"类型守卫","slug":"类型守卫","link":"#类型守卫","children":[{"level":3,"title":"基本类型守卫","slug":"基本类型守卫","link":"#基本类型守卫","children":[]},{"level":3,"title":"使用类型守卫","slug":"使用类型守卫","link":"#使用类型守卫","children":[]},{"level":3,"title":"用户自定义类型守卫","slug":"用户自定义类型守卫","link":"#用户自定义类型守卫","children":[]},{"level":3,"title":"类类型守卫","slug":"类类型守卫","link":"#类类型守卫","children":[]},{"level":3,"title":"在类中使用类型守卫","slug":"在类中使用类型守卫","link":"#在类中使用类型守卫","children":[]}]}],"git":{"updatedTime":1727255714000,"contributors":[{"name":"OnionTin","email":"2775376881@qq.com","commits":1}]},"filePathRelative":"web/Ts/常用类型/类型守卫.md","excerpt":"<h2>类型守卫</h2>\\n<blockquote>\\n<p>类型守卫（Type Guards）是一种方式，用于在运行时检查和缩小变量的类型。当你在处理联合类型或交叉类型时，类型守卫特别有用，因为它们允许你在执行操作之前确定变量的确切类型。</p>\\n</blockquote>\\n<h3>基本类型守卫</h3>\\n<blockquote>\\n<p>基本类型守卫是通过使用类型谓词来实现的。类型谓词是一个表达式，它在编译时不会做任何改变，但在运行时会帮助 TypeScript 缩小变量的类型。isNumber 和 isString 函数都是类型谓词。它们返回一个布尔值，告诉 TypeScript 引擎 x 参数的类型</p>\\n</blockquote>"}');export{k as comp,r as data};
