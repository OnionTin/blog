import{_ as s,o as n,c as a,e as t}from"./app-CilA4iky.js";const e={},p=t(`<h2 id="条件类型" tabindex="-1"><a class="header-anchor" href="#条件类型"><span>条件类型</span></a></h2><blockquote><p>条件类型（Conditional Types）是一种高级类型功能，它允许你基于表达式的值来选择不同的类型。条件类型在编译时评估，并根据条件表达式的结果选择一个类型。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 条件类型的一般形式如下：</span>
<span class="token keyword">type</span> <span class="token class-name">MyType</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">X</span> <span class="token operator">:</span> <span class="token constant">Y</span><span class="token punctuation">;</span>
<span class="token comment">// 这里，T extends U ? X : Y 是一个条件类型表达式，它表示：</span>
<span class="token comment">// 如果类型 T 扩展（或符合）类型 U，则结果是类型 X。</span>
<span class="token comment">// 否则，结果是类型 Y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h3><blockquote><p>IsNumber&lt;T&gt; 是一个条件类型，它检查 T 是否为 number 类型。如果是，结果是 &quot;Yes&quot;；如果不是，结果是 &quot;No&quot;。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">IsNumber<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">?</span> <span class="token string">&quot;Yes&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;No&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">IsNumberResult1</span> <span class="token operator">=</span> IsNumber<span class="token operator">&lt;</span><span class="token number">42</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Yes&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">IsNumberResult2</span> <span class="token operator">=</span> IsNumber<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;No&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="嵌套条件类型" tabindex="-1"><a class="header-anchor" href="#嵌套条件类型"><span>嵌套条件类型</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">IsArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token string">&quot;Array&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Not Array&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">IsNumberArray</span> <span class="token operator">=</span> IsArray<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Array&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">IsStringArray</span> <span class="token operator">=</span> IsArray<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Array&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">IsBooleanArray</span> <span class="token operator">=</span> IsArray<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Array&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">IsObjectArray</span> <span class="token operator">=</span> IsArray<span class="token operator">&lt;</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Array&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">IsNumber</span> <span class="token operator">=</span> IsArray<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Not Array&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用条件类型进行类型守卫" tabindex="-1"><a class="header-anchor" href="#使用条件类型进行类型守卫"><span>使用条件类型进行类型守卫</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">IsStringOrNumber<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span>
  <span class="token operator">?</span> <span class="token string">&quot;String&quot;</span>
  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span>
  <span class="token operator">?</span> <span class="token string">&quot;Number&quot;</span>
  <span class="token operator">:</span> <span class="token string">&quot;Other&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Result1</span> <span class="token operator">=</span> IsStringOrNumber<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;String&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">Result2</span> <span class="token operator">=</span> IsStringOrNumber<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Number&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">Result3</span> <span class="token operator">=</span> IsStringOrNumber<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Other&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="条件类型的分配行为" tabindex="-1"><a class="header-anchor" href="#条件类型的分配行为"><span>条件类型的分配行为</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Primitive</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">IsPrimitiveType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Primitive</span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">IsStringOrNumberOrBoolean</span> <span class="token operator">=</span> IsPrimitiveType<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// string | number | boolean</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用条件类型简化类型定义" tabindex="-1"><a class="header-anchor" href="#使用条件类型简化类型定义"><span>使用条件类型简化类型定义</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">OptionalKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">MakeOptional<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Todo</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  description<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  completed<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">TodoPreview</span> <span class="token operator">=</span> MakeOptional<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&quot;description&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// { title: string; completed: boolean; description?: string; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[p];function l(c,r){return n(),a("div",null,o)}const k=s(e,[["render",l],["__file","条件类型.html.vue"]]),u=JSON.parse('{"path":"/web/Ts/%E7%B1%BB%E5%9E%8B%E6%93%8D%E4%BD%9C/%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"条件类型","slug":"条件类型","link":"#条件类型","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"嵌套条件类型","slug":"嵌套条件类型","link":"#嵌套条件类型","children":[]},{"level":3,"title":"使用条件类型进行类型守卫","slug":"使用条件类型进行类型守卫","link":"#使用条件类型进行类型守卫","children":[]},{"level":3,"title":"条件类型的分配行为","slug":"条件类型的分配行为","link":"#条件类型的分配行为","children":[]},{"level":3,"title":"使用条件类型简化类型定义","slug":"使用条件类型简化类型定义","link":"#使用条件类型简化类型定义","children":[]}]}],"git":{"updatedTime":1727429003000,"contributors":[{"name":"OnionTin","email":"2775376881@qq.com","commits":2}]},"filePathRelative":"web/Ts/类型操作/条件类型.md","excerpt":"<h2>条件类型</h2>\\n<blockquote>\\n<p>条件类型（Conditional Types）是一种高级类型功能，它允许你基于表达式的值来选择不同的类型。条件类型在编译时评估，并根据条件表达式的结果选择一个类型。</p>\\n</blockquote>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token comment\\">// 条件类型的一般形式如下：</span>\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">MyType</span> <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">T</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\"><span class=\\"token constant\\">U</span></span> <span class=\\"token operator\\">?</span> <span class=\\"token constant\\">X</span> <span class=\\"token operator\\">:</span> <span class=\\"token constant\\">Y</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 这里，T extends U ? X : Y 是一个条件类型表达式，它表示：</span>\\n<span class=\\"token comment\\">// 如果类型 T 扩展（或符合）类型 U，则结果是类型 X。</span>\\n<span class=\\"token comment\\">// 否则，结果是类型 Y</span>\\n</code></pre></div>"}');export{k as comp,u as data};
