import{_ as n,o as s,c as a,e as p}from"./app-CilA4iky.js";const t="/blog/assets/成员变量和局部变量01-B7pT7Kwq.png",e="/blog/assets/成员变量和局部变量02-bhzPE4Vw.png",o="/blog/assets/成员变量和局部变量03-DDZ55Mw_.png",c={},l=p(`<h2 id="成员变量和局部变量" tabindex="-1"><a class="header-anchor" href="#成员变量和局部变量"><span>成员变量和局部变量</span></a></h2><p><code>初始值、区别、匿名对象可以当实参、方法和对象回收等问题</code></p><h3 id="成员变量和局部变量的区别" tabindex="-1"><a class="header-anchor" href="#成员变量和局部变量的区别"><span>成员变量和局部变量的区别</span></a></h3><ol><li><p>定义的位置不同</p><p>成员变量：定义在类中方法外</p><p>局部变量：定义在方法中或方法的声明上</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 成员变量</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">// 在类中、方法外定义的变量</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 局部变量</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token char">&#39;小明&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 在info方法中定义的变量</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 局部变量</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// age是局部变量，定义在info方法的声明上</span>
        age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>内存位置不同</p><p>成员变量：存储在堆中的对象中</p><p>局部变量：存储在栈中的方法中</p></li><li><p>初始值不同</p><p><code>成员变量</code>：<code>有默认初始值</code>，如果<code>不赋值也可以使用</code></p><blockquote><p>String 类型的成员变量：默认初始值是 null</p><p>int 类型的成员变量：默认初始值是 0</p><p>char 类型的成员变量：默认初始值是&#39;\\u0000&#39;</p><p>boolean 类型的成员变量：默认初始值是 false</p><p>引用类型的成员变量：默认初始值是 null</p></blockquote></li></ol><p><code>局部变量</code>：<code>没有默认初始值</code>，如果没有赋值，不能使用，否则报错，使用前必须<code>先赋值</code></p><ol start="4"><li><p>声明周期不同</p><p>成员变量：随着对象的创建而存在，随着对象的消失而消失</p><p>局部变量：随着方法的调用而存在，随着方法的调用完毕而消失</p></li><li><p>作用域范围不同</p><p>成员变量：整个类中都可以使用</p><p>局部变量：只能在方法中使用，出了方法就用不了了</p></li></ol><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h3><ol><li><p><code>匿名对象可以做为实际参数传递</code><img src="`+t+'" alt="1"></p></li><li><p><code>方法和对象的回收</code><img src="'+e+'" alt="2"></p></li><li><p><code>共享static属性</code><img src="'+o+'" alt="3"></p></li></ol>',8),i=[l];function u(k,d){return s(),a("div",null,i)}const m=n(c,[["render",u],["__file","成员变量和局部变量.html.vue"]]),v=JSON.parse(`{"path":"/admin/Java/Java%E5%9F%BA%E7%A1%80/%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"成员变量和局部变量","slug":"成员变量和局部变量","link":"#成员变量和局部变量","children":[{"level":3,"title":"成员变量和局部变量的区别","slug":"成员变量和局部变量的区别","link":"#成员变量和局部变量的区别","children":[]},{"level":3,"title":"案例","slug":"案例","link":"#案例","children":[]}]}],"git":{"updatedTime":1710404435000,"contributors":[{"name":"OnionTin","email":"2775376881@qq.com","commits":1}]},"filePathRelative":"admin/Java/Java基础/成员变量和局部变量.md","excerpt":"<h2>成员变量和局部变量</h2>\\n<p><code>初始值、区别、匿名对象可以当实参、方法和对象回收等问题</code></p>\\n<h3>成员变量和局部变量的区别</h3>\\n<ol>\\n<li>\\n<p>定义的位置不同</p>\\n<p>成员变量：定义在类中方法外</p>\\n<p>局部变量：定义在方法中或方法的声明上</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 成员变量</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Person</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 在类中、方法外定义的变量</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// null</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// 局部变量</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Person</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">String</span> name <span class=\\"token operator\\">=</span> <span class=\\"token char\\">'小明'</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 在info方法中定义的变量</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 局部变量</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Person</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> age<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// age是局部变量，定义在info方法的声明上</span>\\n        age <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>age<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></li>\\n<li>\\n<p>内存位置不同</p>\\n<p>成员变量：存储在堆中的对象中</p>\\n<p>局部变量：存储在栈中的方法中</p>\\n</li>\\n<li>\\n<p>初始值不同</p>\\n<p><code>成员变量</code>：<code>有默认初始值</code>，如果<code>不赋值也可以使用</code></p>\\n<blockquote>\\n<p>String 类型的成员变量：默认初始值是 null</p>\\n<p>int 类型的成员变量：默认初始值是 0</p>\\n<p>char 类型的成员变量：默认初始值是'\\\\u0000'</p>\\n<p>boolean 类型的成员变量：默认初始值是 false</p>\\n<p>引用类型的成员变量：默认初始值是 null</p>\\n</blockquote>\\n</li>\\n</ol>"}`);export{m as comp,v as data};
