import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "../app.Bl4XAEYy.mjs";
const _sfc_main = {};
function _sfc_ssrRender(_ctx, _push, _parent, _attrs) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h2 id="context-与状态管理库" tabindex="-1"><a class="header-anchor" href="#context-与状态管理库"><span>Context 与状态管理库</span></a></h2><p>React Context 提供了一种在组件树中共享值的方式，而无需显式地通过每个层级传递 props。这使得它成为实现全局状态管理的理想选择，尤其是在与状态管理库结合使用时。</p><h3 id="react-context" tabindex="-1"><a class="header-anchor" href="#react-context"><span>React Context</span></a></h3><p>React Context 允许你创建一个全局的 state，通过<code>Provider</code>组件包裹你的应用，使得状态在整个应用中可访问。通过<code>useContext</code> Hook，你可以在任何组件中轻松地访问和更新这个全局状态。</p><ul><li><p><strong>创建 Context</strong>：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> MyContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>提供 Context 值</strong>：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token comment">/* 一些值 */</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">YourComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyContext.Provider</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>消费 Context</strong>：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">YourComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MyContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="状态管理库" tabindex="-1"><a class="header-anchor" href="#状态管理库"><span>状态管理库</span></a></h3><p>虽然 React Context 可以处理一些全局状态管理的场景，但在面对更复杂的状态逻辑时，你可能需要一个更强大的状态管理库。</p><h4 id="redux" tabindex="-1"><a class="header-anchor" href="#redux"><span>Redux</span></a></h4><p>Redux 是一个流行的状态管理库，它提供了一个中央存储，以可预测的方式管理应用的状态。它的核心概念包括单一数据源、状态是只读的以及使用纯函数来执行修改。</p><ul><li><strong>特点</strong>： <ul><li>单一数据源：整个应用的状态存储在一个对象中。</li><li>纯函数：通过 reducers 处理状态更新。</li><li>中间件：支持如 Redux-Saga、Redux-Thunk 等中间件。</li></ul></li></ul><h4 id="mobx" tabindex="-1"><a class="header-anchor" href="#mobx"><span>MobX</span></a></h4><p>MobX 是一个轻量级的响应式状态管理库，它允许你以更直观的方式管理状态。它使用可观察的数据结构和自动追踪依赖关系。</p><ul><li><strong>特点</strong>： <ul><li>响应式：当状态改变时，相关的组件会自动更新。</li><li>装饰器：使用装饰器来定义可观察的属性。</li></ul></li></ul><h4 id="recoil" tabindex="-1"><a class="header-anchor" href="#recoil"><span>Recoil</span></a></h4><p>Recoil 是由 Facebook 开发的一个实验性的状态管理库，它提供了原子化的状态管理方式。</p><ul><li><strong>特点</strong>： <ul><li>原子状态：状态被分割成独立的片段。</li><li>选择器：允许你基于状态派生出新的值。</li></ul></li></ul><h4 id="jotai" tabindex="-1"><a class="header-anchor" href="#jotai"><span>Jotai</span></a></h4><p>Jotai 是一个基于 React Hooks 的轻量级状态管理库，它专注于原子状态管理和响应式编程。</p><ul><li><strong>特点</strong>： <ul><li>原子状态：状态被分割成独立的原子。</li><li>派生状态：允许基于现有状态派生出新的值。</li></ul></li></ul><h3 id="结合使用" tabindex="-1"><a class="header-anchor" href="#结合使用"><span>结合使用</span></a></h3><p>你可以将 React Context 与这些状态管理库结合使用，以实现更高效的全局状态管理。例如，你可以使用 Redux 来管理应用的状态，同时使用 Context API 来在组件树中传递这些状态。</p><ul><li><p><strong>Redux 与 Context</strong>：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>MobX 与 Context</strong>：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>mobxStore<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>通过这种方式，你可以利用状态管理库的强大功能，同时享受 Context 提供的简洁性和易用性。</p><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h3><ul><li><strong>避免过度使用</strong>：只在需要全局访问时使用 Context。</li><li><strong>分离逻辑</strong>：保持 Context 的简洁性，将逻辑代码抽离到单独的函数或组件中。</li><li><strong>结合使用</strong>：根据项目需求，灵活地结合使用不同的状态管理库和 Context API。</li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("../pages/web/React/React提升/Context与状态管理库.html.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const Context_______html = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender], ["__file", "Context与状态管理库.html.vue"]]);
const data = JSON.parse('{"path":"/web/React/React%E6%8F%90%E5%8D%87/Context%E4%B8%8E%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%BA%93.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Context 与状态管理库","slug":"context-与状态管理库","link":"#context-与状态管理库","children":[{"level":3,"title":"React Context","slug":"react-context","link":"#react-context","children":[]},{"level":3,"title":"状态管理库","slug":"状态管理库","link":"#状态管理库","children":[]},{"level":3,"title":"结合使用","slug":"结合使用","link":"#结合使用","children":[]},{"level":3,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]}]}],"git":{"updatedTime":1728487189000,"contributors":[{"name":"OnionTin]","email":"2775376881@qq.com","commits":1}]},"filePathRelative":"web/React/React提升/Context与状态管理库.md","excerpt":"<!-- @format -->\\n<h2>Context 与状态管理库</h2>\\n<p>React Context 提供了一种在组件树中共享值的方式，而无需显式地通过每个层级传递 props。这使得它成为实现全局状态管理的理想选择，尤其是在与状态管理库结合使用时。</p>\\n<h3>React Context</h3>\\n<p>React Context 允许你创建一个全局的 state，通过<code>Provider</code>组件包裹你的应用，使得状态在整个应用中可访问。通过<code>useContext</code> Hook，你可以在任何组件中轻松地访问和更新这个全局状态。</p>\\n"}');
export {
  Context_______html as comp,
  data
};
