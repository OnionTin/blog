import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "../app.Bl4XAEYy.mjs";
const _sfc_main = {};
function _sfc_ssrRender(_ctx, _push, _parent, _attrs) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h2 id="usereducer" tabindex="-1"><a class="header-anchor" href="#usereducer"><span>useReducer</span></a></h2><p><code>useReducer</code> 是 React 提供的另一个 Hook，它让你可以在函数组件中使用 reducer 函数来管理复杂状态。</p><h3 id="_1-基本使用" tabindex="-1"><a class="header-anchor" href="#_1-基本使用"><span>1. 基本使用</span></a></h3><p><code>useReducer</code> 让你向组件传递一个 reducer 函数，这个函数会根据 action 来返回新的状态。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;increment&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&#39;decrement&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      Count: </span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;increment&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;decrement&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">-</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-初始化状态" tabindex="-1"><a class="header-anchor" href="#_2-初始化状态"><span>2. 初始化状态</span></a></h3><p><code>useReducer</code> 的第二个参数是初始状态。与 <code>useState</code> 不同，它不是在渲染后才定义，而是在组件创建时就定义。</p><h3 id="_3-调度动作" tabindex="-1"><a class="header-anchor" href="#_3-调度动作"><span>3. 调度动作</span></a></h3><p><code>useReducer</code> 返回一个数组，其中第二个元素是一个 dispatch 函数，用来分派 action。</p><h3 id="_4-reducer-函数" tabindex="-1"><a class="header-anchor" href="#_4-reducer-函数"><span>4. Reducer 函数</span></a></h3><p>Reducer 是一个纯函数，它接受当前状态和一个动作对象，返回新的状态对象。</p><h3 id="_5-动作对象" tabindex="-1"><a class="header-anchor" href="#_5-动作对象"><span>5. 动作对象</span></a></h3><p>Action 是一个包含类型属性的对象，表示要执行什么操作。</p><h3 id="_6-状态更新逻辑" tabindex="-1"><a class="header-anchor" href="#_6-状态更新逻辑"><span>6. 状态更新逻辑</span></a></h3><p>Reducer 通常包含多个 case，每个 case 对应一种动作，返回对应动作的新状态。</p><h3 id="_7-状态不可变性" tabindex="-1"><a class="header-anchor" href="#_7-状态不可变性"><span>7. 状态不可变性</span></a></h3><p>与 Redux 类似，<code>useReducer</code> 要求状态更新时返回一个新对象，而不是修改原状态。</p><h3 id="_8-性能优化" tabindex="-1"><a class="header-anchor" href="#_8-性能优化"><span>8. 性能优化</span></a></h3><p>由于状态不可变性，<code>useReducer</code> 可以用于性能优化，如避免不必要的渲染。</p><h3 id="_9-自定义-hook" tabindex="-1"><a class="header-anchor" href="#_9-自定义-hook"><span>9. 自定义 Hook</span></a></h3><p><code>useReducer</code> 可以与 <code>useContext</code> 结合使用，创建复杂的状态逻辑和全局状态管理。</p><h3 id="_10-与usestate比较" tabindex="-1"><a class="header-anchor" href="#_10-与usestate比较"><span>10. 与<code>useState</code>比较</span></a></h3><ul><li><code>useState</code> 适合管理简单状态。</li><li><code>useReducer</code> 适合管理复杂状态逻辑，如多子值状态。</li></ul><h3 id="_11-异步操作" tabindex="-1"><a class="header-anchor" href="#_11-异步操作"><span>11. 异步操作</span></a></h3><p>虽然 <code>useReducer</code> 本身不处理异步操作，但可以与 <code>useEffect</code> 结合使用执行异步操作。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useReducer<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 初始状态 */</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 异步操作</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>state<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当state.value变化时执行</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-初始状态作为函数" tabindex="-1"><a class="header-anchor" href="#_12-初始状态作为函数"><span>12. 初始状态作为函数</span></a></h3><p>如果初始状态需要根据 props 计算，可以传递一个函数给 <code>useReducer</code>。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> initialReducerState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> initialCount <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>
    reducer<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">initialCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> initialCount <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    initialCount
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-调试" tabindex="-1"><a class="header-anchor" href="#_13-调试"><span>13. 调试</span></a></h3><p>使用 <code>useReducer</code> 的调试模式可以更容易地跟踪动作和状态的变化。</p><h3 id="_14-动作组合" tabindex="-1"><a class="header-anchor" href="#_14-动作组合"><span>14. 动作组合</span></a></h3><p>可以在 reducer 中组合多个动作，以处理复杂的状态转换。</p><h3 id="_15-状态提升" tabindex="-1"><a class="header-anchor" href="#_15-状态提升"><span>15. 状态提升</span></a></h3><p>对于深层嵌套组件的状态管理，可以考虑将状态提升到共同的父组件中。</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("../pages/web/React/React提升/Hooks/useReducer.html.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const useReducer_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender], ["__file", "useReducer.html.vue"]]);
const data = JSON.parse(`{"path":"/web/React/React%E6%8F%90%E5%8D%87/Hooks/useReducer.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"useReducer","slug":"usereducer","link":"#usereducer","children":[{"level":3,"title":"1. 基本使用","slug":"_1-基本使用","link":"#_1-基本使用","children":[]},{"level":3,"title":"2. 初始化状态","slug":"_2-初始化状态","link":"#_2-初始化状态","children":[]},{"level":3,"title":"3. 调度动作","slug":"_3-调度动作","link":"#_3-调度动作","children":[]},{"level":3,"title":"4. Reducer 函数","slug":"_4-reducer-函数","link":"#_4-reducer-函数","children":[]},{"level":3,"title":"5. 动作对象","slug":"_5-动作对象","link":"#_5-动作对象","children":[]},{"level":3,"title":"6. 状态更新逻辑","slug":"_6-状态更新逻辑","link":"#_6-状态更新逻辑","children":[]},{"level":3,"title":"7. 状态不可变性","slug":"_7-状态不可变性","link":"#_7-状态不可变性","children":[]},{"level":3,"title":"8. 性能优化","slug":"_8-性能优化","link":"#_8-性能优化","children":[]},{"level":3,"title":"9. 自定义 Hook","slug":"_9-自定义-hook","link":"#_9-自定义-hook","children":[]},{"level":3,"title":"10. 与useState比较","slug":"_10-与usestate比较","link":"#_10-与usestate比较","children":[]},{"level":3,"title":"11. 异步操作","slug":"_11-异步操作","link":"#_11-异步操作","children":[]},{"level":3,"title":"12. 初始状态作为函数","slug":"_12-初始状态作为函数","link":"#_12-初始状态作为函数","children":[]},{"level":3,"title":"13. 调试","slug":"_13-调试","link":"#_13-调试","children":[]},{"level":3,"title":"14. 动作组合","slug":"_14-动作组合","link":"#_14-动作组合","children":[]},{"level":3,"title":"15. 状态提升","slug":"_15-状态提升","link":"#_15-状态提升","children":[]}]}],"git":{"updatedTime":1728487189000,"contributors":[{"name":"OnionTin]","email":"2775376881@qq.com","commits":1}]},"filePathRelative":"web/React/React提升/Hooks/useReducer.md","excerpt":"<!-- @format -->\\n<h2>useReducer</h2>\\n<p><code>useReducer</code> 是 React 提供的另一个 Hook，它让你可以在函数组件中使用 reducer 函数来管理复杂状态。</p>\\n<h3>1. 基本使用</h3>\\n<p><code>useReducer</code> 让你向组件传递一个 reducer 函数，这个函数会根据 action 来返回新的状态。</p>\\n<div class=\\"language-jsx\\" data-ext=\\"jsx\\" data-title=\\"jsx\\"><pre class=\\"language-jsx\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> useReducer <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'react'</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">reducer</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">state<span class=\\"token punctuation\\">,</span> action</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">switch</span> <span class=\\"token punctuation\\">(</span>action<span class=\\"token punctuation\\">.</span>type<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">case</span> <span class=\\"token string\\">'increment'</span><span class=\\"token operator\\">:</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">count</span><span class=\\"token operator\\">:</span> state<span class=\\"token punctuation\\">.</span>count <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">case</span> <span class=\\"token string\\">'decrement'</span><span class=\\"token operator\\">:</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">count</span><span class=\\"token operator\\">:</span> state<span class=\\"token punctuation\\">.</span>count <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">default</span><span class=\\"token operator\\">:</span>\\n      <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Counter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>state<span class=\\"token punctuation\\">,</span> dispatch<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useReducer</span><span class=\\"token punctuation\\">(</span>reducer<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">count</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">\\n      Count: </span><span class=\\"token punctuation\\">{</span>state<span class=\\"token punctuation\\">.</span>count<span class=\\"token punctuation\\">}</span><span class=\\"token plain-text\\">\\n      </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span> <span class=\\"token attr-name\\">onClick</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token function\\">dispatch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'increment'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">+</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">\\n      </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span> <span class=\\"token attr-name\\">onClick</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token function\\">dispatch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'decrement'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">-</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">\\n    </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span></span><span class=\\"token punctuation\\">&gt;</span></span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}`);
export {
  useReducer_html as comp,
  data
};
