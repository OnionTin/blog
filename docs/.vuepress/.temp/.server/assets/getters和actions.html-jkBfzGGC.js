import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "../app.Bl4XAEYy.mjs";
const _sfc_main = {};
function _sfc_ssrRender(_ctx, _push, _parent, _attrs) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h2 id="getters-和-actions" tabindex="-1"><a class="header-anchor" href="#getters-和-actions"><span>getters 和 actions</span></a></h2><h3 id="getters" tabindex="-1"><a class="header-anchor" href="#getters"><span>getters</span></a></h3><blockquote><p>类似于计算属性，getters 的返回值会根据它的依赖被缓存起来，并且只有当它的依赖值发生了改变才会被重新计算</p></blockquote><ul><li>getters 中的函数接收一个 <code>state</code> 作为其第一个参数</li><li>getters 可以被嵌套调用，它们可以返回其他 getters</li><li>getters 可以通过 <code>this</code> 访问其他 getters</li><li>getters 可以通过 <code>this.$pinia</code> 访问整个 store 实例</li><li>getters 可以通过 <code>this.$pinia.state</code> 访问整个 state</li><li>getters 可以通过 <code>this.$pinia.getters</code> 访问整个 getters</li><li>getters 可以通过 <code>this.$pinia.actions</code> 访问整个 actions</li><li>getters 可以通过 <code>this.$pinia.commit</code> 访问整个 commit</li><li>getters 可以通过 <code>this.$pinia.dispatch</code> 访问整个 dispatch</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">doubleCount</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="actions" tabindex="-1"><a class="header-anchor" href="#actions"><span>actions</span></a></h3><blockquote><p>actions 类似于组件中的 methods，它们可以包含任意逻辑，包括异步操作</p></blockquote><ul><li>actions 可以通过 <code>this</code> 访问整个 store 实例</li><li>actions 可以通过 <code>this.$pinia.state</code> 访问整个 state</li><li>actions 可以通过 <code>this.$pinia.getters</code> 访问整个 getters</li><li>actions 可以通过 <code>this.$pinia.actions</code> 访问整个 actions</li><li>actions 可以通过 <code>this.$pinia.commit</code> 访问整个 commit</li><li>actions 可以通过 <code>this.$pinia.dispatch</code> 访问整个 dispatch</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 支持同步和异步</span>
    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("../pages/web/Vue/Vue3/Vue基础/pinia/getters和actions.html.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const getters_actions_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender], ["__file", "getters和actions.html.vue"]]);
const data = JSON.parse('{"path":"/web/Vue/Vue3/Vue%E5%9F%BA%E7%A1%80/pinia/getters%E5%92%8Cactions.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"getters 和 actions","slug":"getters-和-actions","link":"#getters-和-actions","children":[{"level":3,"title":"getters","slug":"getters","link":"#getters","children":[]},{"level":3,"title":"actions","slug":"actions","link":"#actions","children":[]}]}],"git":{"updatedTime":1727600594000,"contributors":[{"name":"OnionTin","email":"2775376881@qq.com","commits":2}]},"filePathRelative":"web/Vue/Vue3/Vue基础/pinia/getters和actions.md","excerpt":"<h2>getters 和 actions</h2>\\n<h3>getters</h3>\\n<blockquote>\\n<p>类似于计算属性，getters 的返回值会根据它的依赖被缓存起来，并且只有当它的依赖值发生了改变才会被重新计算</p>\\n</blockquote>\\n<ul>\\n<li>getters 中的函数接收一个 <code>state</code> 作为其第一个参数</li>\\n<li>getters 可以被嵌套调用，它们可以返回其他 getters</li>\\n<li>getters 可以通过 <code>this</code> 访问其他 getters</li>\\n<li>getters 可以通过 <code>this.$pinia</code> 访问整个 store 实例</li>\\n<li>getters 可以通过 <code>this.$pinia.state</code> 访问整个 state</li>\\n<li>getters 可以通过 <code>this.$pinia.getters</code> 访问整个 getters</li>\\n<li>getters 可以通过 <code>this.$pinia.actions</code> 访问整个 actions</li>\\n<li>getters 可以通过 <code>this.$pinia.commit</code> 访问整个 commit</li>\\n<li>getters 可以通过 <code>this.$pinia.dispatch</code> 访问整个 dispatch</li>\\n</ul>"}');
export {
  getters_actions_html as comp,
  data
};
