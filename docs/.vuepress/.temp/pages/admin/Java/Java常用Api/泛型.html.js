import comp from "D:/Programs/web/blog/docs/.vuepress/.temp/pages/admin/Java/Java常用Api/泛型.html.vue"
const data = JSON.parse("{\"path\":\"/admin/Java/Java%E5%B8%B8%E7%94%A8Api/%E6%B3%9B%E5%9E%8B.html\",\"title\":\"\",\"lang\":\"zh-CN\",\"frontmatter\":{},\"headers\":[{\"level\":2,\"title\":\"泛型\",\"slug\":\"泛型\",\"link\":\"#泛型\",\"children\":[{\"level\":3,\"title\":\"泛型的基本使用\",\"slug\":\"泛型的基本使用\",\"link\":\"#泛型的基本使用\",\"children\":[]},{\"level\":3,\"title\":\"泛型的注意事项\",\"slug\":\"泛型的注意事项\",\"link\":\"#泛型的注意事项\",\"children\":[]},{\"level\":3,\"title\":\"自定义泛型\",\"slug\":\"自定义泛型\",\"link\":\"#自定义泛型\",\"children\":[]},{\"level\":3,\"title\":\"泛型的通配符\",\"slug\":\"泛型的通配符\",\"link\":\"#泛型的通配符\",\"children\":[]},{\"level\":3,\"title\":\"泛型综合\",\"slug\":\"泛型综合\",\"link\":\"#泛型综合\",\"children\":[]}]}],\"git\":{\"updatedTime\":1711099054000,\"contributors\":[{\"name\":\"OnionTin\",\"email\":\"2775376881@qq.com\",\"commits\":1}]},\"filePathRelative\":\"admin/Java/Java常用Api/泛型.md\",\"excerpt\":\"<h2>泛型</h2>\\n<p>什么是泛型？</p>\\n<p>有泛型的地方就要指定参数类型了，不指定默认就是 Object 类。</p>\\n<p>泛型的定义格式？</p>\\n<blockquote>\\n<p><code>&lt;E&gt;</code></p>\\n<p><code>&lt;E,M&gt;</code></p>\\n</blockquote>\\n<p>泛型的作用？</p>\\n<ol>\\n<li>\\n<p>避免了强制类型转换</p>\\n</li>\\n<li>\\n<p>限制了集合中元素的数据类型</p>\\n</li>\\n</ol>\\n<h3>泛型的基本使用</h3>\\n<div class=\\\"language-java\\\" data-ext=\\\"java\\\" data-title=\\\"java\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">package</span> <span class=\\\"token namespace\\\">com<span class=\\\"token punctuation\\\">.</span>wuziqi<span class=\\\"token punctuation\\\">.</span>gobang<span class=\\\"token punctuation\\\">.</span>controller</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token import\\\"><span class=\\\"token namespace\\\">java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span></span><span class=\\\"token class-name\\\">ArrayList</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token import\\\"><span class=\\\"token namespace\\\">java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span></span><span class=\\\"token class-name\\\">Iterator</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DemoFx</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 限定为String类型</span>\\n        <span class=\\\"token class-name\\\">ArrayList</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">&gt;</span></span> al <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ArrayList</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\">// ArrayList al = new ArrayList();</span>\\n        al<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"1\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        al<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"2\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        al<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"3\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// 如果是String类型，这里会编译报错；取消泛型则可以添加4了</span>\\n        <span class=\\\"token comment\\\">// al.add(4);</span>\\n\\n        <span class=\\\"token comment\\\">/*\\n        如果不限制类型，foreach要用Object类型\\n        for (Object al1 : al){\\n            System.out.println(al1);\\n        }\\n        **/</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">String</span> al1 <span class=\\\"token operator\\\">:</span> al<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>al1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1 2 3</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token comment\\\">/*\\n        不限制类型写法\\n        Iterator al1 = al.iterator();\\n        while (al1.hasNext()) {\\n            System.out.println(al1.next());\\n        }**/</span>\\n        <span class=\\\"token class-name\\\">Iterator</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">&gt;</span></span> al1 <span class=\\\"token operator\\\">=</span> al<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">iterator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>al1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hasNext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>al1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1 2 3</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\"}")
export { comp, data }
