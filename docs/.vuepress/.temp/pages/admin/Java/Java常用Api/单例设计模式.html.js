import comp from "D:/Programs/web/blog/docs/.vuepress/.temp/pages/admin/Java/Java常用Api/单例设计模式.html.vue"
const data = JSON.parse("{\"path\":\"/admin/Java/Java%E5%B8%B8%E7%94%A8Api/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html\",\"title\":\"\",\"lang\":\"zh-CN\",\"frontmatter\":{},\"headers\":[{\"level\":2,\"title\":\"单例设计模式\",\"slug\":\"单例设计模式\",\"link\":\"#单例设计模式\",\"children\":[{\"level\":3,\"title\":\"如何实现单例设计模式\",\"slug\":\"如何实现单例设计模式\",\"link\":\"#如何实现单例设计模式\",\"children\":[]},{\"level\":3,\"title\":\"延迟加载的问题(多线程并发访问可能不再是单例模式)\",\"slug\":\"延迟加载的问题-多线程并发访问可能不再是单例模式\",\"link\":\"#延迟加载的问题-多线程并发访问可能不再是单例模式\",\"children\":[]},{\"level\":3,\"title\":\"解决延迟加载出现的问题(多线程同步机制)\",\"slug\":\"解决延迟加载出现的问题-多线程同步机制\",\"link\":\"#解决延迟加载出现的问题-多线程同步机制\",\"children\":[]},{\"level\":3,\"title\":\"单例模式最终方案\",\"slug\":\"单例模式最终方案\",\"link\":\"#单例模式最终方案\",\"children\":[]}]}],\"git\":{\"updatedTime\":1718958762000,\"contributors\":[{\"name\":\"OnionTin\",\"email\":\"2775376881@qq.com\",\"commits\":1}]},\"filePathRelative\":\"admin/Java/Java常用Api/单例设计模式.md\",\"excerpt\":\"<h2>单例设计模式</h2>\\n<blockquote>\\n<p>使用单例设计模式，能够实现，一个类只能有一个对象。</p>\\n</blockquote>\\n<h3>如何实现单例设计模式</h3>\\n<p>方式一：立即加载</p>\\n<p>优点：不会出现多线程并发访问问题</p>\\n<p>缺点：太早进入内存，又太晚消失了，生命周期长，占内存</p>\\n<div class=\\\"language-java\\\" data-ext=\\\"java\\\" data-title=\\\"java\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">package</span> <span class=\\\"token namespace\\\">com<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span></span><span class=\\\"token class-name\\\">SingleMode</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> mode01 <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 只有一个对象，所以输出true，都是地址值</span>\\n        <span class=\\\"token class-name\\\">Singleton</span> singleton1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">Singleton</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\">Singleton</span> singleton2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">Singleton</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>singleton1 <span class=\\\"token operator\\\">==</span> singleton2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Singleton</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token class-name\\\">Singleton</span> s <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Singleton</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token class-name\\\">Singleton</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token class-name\\\">Singleton</span> <span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> s<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\"}")
export { comp, data }
