import comp from "D:/Programs/web/blog/docs/.vuepress/.temp/pages/web/Ts/常用类型/interface接口.html.vue"
const data = JSON.parse("{\"path\":\"/web/Ts/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%9E%8B/interface%E6%8E%A5%E5%8F%A3.html\",\"title\":\"\",\"lang\":\"zh-CN\",\"frontmatter\":{},\"headers\":[{\"level\":2,\"title\":\"interface 接口\",\"slug\":\"interface-接口\",\"link\":\"#interface-接口\",\"children\":[{\"level\":3,\"title\":\"基本语法\",\"slug\":\"基本语法\",\"link\":\"#基本语法\",\"children\":[]},{\"level\":3,\"title\":\"实现接口\",\"slug\":\"实现接口\",\"link\":\"#实现接口\",\"children\":[]},{\"level\":3,\"title\":\"只读属性(readonly)\",\"slug\":\"只读属性-readonly\",\"link\":\"#只读属性-readonly\",\"children\":[]},{\"level\":3,\"title\":\"函数类型\",\"slug\":\"函数类型\",\"link\":\"#函数类型\",\"children\":[]},{\"level\":3,\"title\":\"扩展接口\",\"slug\":\"扩展接口\",\"link\":\"#扩展接口\",\"children\":[]},{\"level\":3,\"title\":\"索引签名\",\"slug\":\"索引签名\",\"link\":\"#索引签名\",\"children\":[]}]}],\"git\":{\"updatedTime\":1727255714000,\"contributors\":[{\"name\":\"OnionTin\",\"email\":\"2775376881@qq.com\",\"commits\":1}]},\"filePathRelative\":\"web/Ts/常用类型/interface接口.md\",\"excerpt\":\"<h2>interface 接口</h2>\\n<blockquote>\\n<p>接口（Interfaces）是一种强大的方式，用于定义对象的结构，它是一种对类型而不是对值的描述。接口可以被理解为对象的蓝图，它规定了对象必须具有的结构和类型，但不实现它们。接口主要用于类型检查和确保对象符合预期的形状</p>\\n</blockquote>\\n<h3>基本语法</h3>\\n<blockquote>\\n<p>Person 接口，它要求任何实现这个接口的对象都必须有 name（字符串类型）和 age（数字类型）两个属性</p>\\n</blockquote>\\n<div class=\\\"language-typescript\\\" data-ext=\\\"ts\\\" data-title=\\\"ts\\\"><pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Person</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 接口中所有的属性不能赋值</span>\\n  age<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">say</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 不能有方法体, 接口只定义对象的结构而没有实际的值, 类似抽象方法</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 接口可以重名</span>\\n  sex<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> p1<span class=\\\"token operator\\\">:</span> Person <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'ths'</span><span class=\\\"token punctuation\\\">,</span>\\n  age<span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">say</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">void</span>\\n  <span class=\\\"token comment\\\">//或者</span>\\n  <span class=\\\"token function\\\">say</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'11111'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 再或者</span>\\n  <span class=\\\"token function-variable function\\\">say</span><span class=\\\"token operator\\\">:</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=&gt;</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'11111'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\"}")
export { comp, data }
