import comp from "D:/Programs/web/blog/docs/.vuepress/.temp/pages/web/Ts/关于函数/调用签名.html.vue"
const data = JSON.parse("{\"path\":\"/web/Ts/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0/%E8%B0%83%E7%94%A8%E7%AD%BE%E5%90%8D.html\",\"title\":\"\",\"lang\":\"zh-CN\",\"frontmatter\":{},\"headers\":[{\"level\":2,\"title\":\"调用签名\",\"slug\":\"调用签名\",\"link\":\"#调用签名\",\"children\":[{\"level\":3,\"title\":\"基本语法\",\"slug\":\"基本语法\",\"link\":\"#基本语法\",\"children\":[]},{\"level\":3,\"title\":\"带有可选参数的调用签名\",\"slug\":\"带有可选参数的调用签名\",\"link\":\"#带有可选参数的调用签名\",\"children\":[]},{\"level\":3,\"title\":\"带有剩余参数的调用签名\",\"slug\":\"带有剩余参数的调用签名\",\"link\":\"#带有剩余参数的调用签名\",\"children\":[]},{\"level\":3,\"title\":\"带有 this 类型的调用签名\",\"slug\":\"带有-this-类型的调用签名\",\"link\":\"#带有-this-类型的调用签名\",\"children\":[]},{\"level\":3,\"title\":\"泛型调用签名\",\"slug\":\"泛型调用签名\",\"link\":\"#泛型调用签名\",\"children\":[]},{\"level\":3,\"title\":\"多个调用签名\",\"slug\":\"多个调用签名\",\"link\":\"#多个调用签名\",\"children\":[]},{\"level\":3,\"title\":\"注意事项\",\"slug\":\"注意事项\",\"link\":\"#注意事项\",\"children\":[]}]}],\"git\":{\"updatedTime\":1727255714000,\"contributors\":[{\"name\":\"OnionTin\",\"email\":\"2775376881@qq.com\",\"commits\":1}]},\"filePathRelative\":\"web/Ts/关于函数/调用签名.md\",\"excerpt\":\"<h2>调用签名</h2>\\n<blockquote>\\n<p>调用签名（Call Signatures）是接口中用于描述函数类型的一种方式。它们定义了函数的参数列表和返回类型。调用签名使得接口可以作为一种通用的函数类型，用于任何符合调用签名描述的函数。</p>\\n</blockquote>\\n<h3>基本语法</h3>\\n<blockquote>\\n<p>接口可以包含一个或多个调用签名。GreetFunction 接口定义了一个调用签名，它指定了函数必须接受一个 string 类型的参数并且没有返回值（void）。</p>\\n</blockquote>\\n<div class=\\\"language-typescript\\\" data-ext=\\\"ts\\\" data-title=\\\"ts\\\"><pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">GreetFunction</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 实现这个接口的任何函数都必须接受一个 string 参数并返回 void</span>\\n<span class=\\\"token keyword\\\">const</span> greet<span class=\\\"token operator\\\">:</span> <span class=\\\"token function-variable function\\\">GreetFunction</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">Hello, </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">!</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div>\"}")
export { comp, data }
